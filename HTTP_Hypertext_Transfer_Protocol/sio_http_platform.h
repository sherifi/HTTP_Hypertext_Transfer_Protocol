/*
**copyright (C) 2020 "SHERIFI" Shkelqim Sherifi <sherifi_co@yahoo.com>.
**Boost Software License - Version 1.0 - October 03th, 2020
**
** Licensed under the SHERIFI Inc Private License, Version 1.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.sherifiIO.org/licenses/LICENSE-1.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
**The copyright notices in the Software and this entire statement, including
**the above license grant, this restriction and the following disclaimer,
**must be included in all copies of the Software, in whole or in part, and
**all derivative works of the Software, unless such copies or derivative
**works are solely in the form of machine-executable object code generated by
**a source language processor.
**
**THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
**IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
**FITNESS FOR PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
**AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
**LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
**OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
**SOFTWARE.
**
** This header is generated from the SHERIFI HTTPHypertextTransferProtocol XML API Registry.
**
*/

////////////////////////////////////////////////////////////////////////////////
//        NAME: sio_http_platform.h
// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol Platform
//   ARGUMENTS: N/A
// USES GLOBAL: N/A
// MODIFIES GL: N/A
//     RETURNS: N/A
//      AUTHOR: SHERIFI
// AUTHOR/DATE: GMT Saturday, October 03,2020
////////////////////////////////////////////////////////////////////////////////
#ifndef SIO_HTTP_PLATFORM_H_
#define SIO_HTTP_PLATFORM_H_ 1

#define sio_MAX_HTTP_PLATFORM_CHAR								64
#define sio_MAX_HTTP_PLATFORM_INFO_CHAR							sio_MAX_HTTP_PLATFORM_CHAR

#ifdef __cplusplus
extern "C"
{
#endif //__cplusplus
/*
***************************************************************************************************
*   Platform-specific directives and type declarations
***************************************************************************************************
*/

/* Platform-specific calling convention macros.
*
* Platforms should define these so that HTTP clients call sio_HTTP commands
* with the same calling conventions that the HTTP implementation expects.
*
* sio_API_ATTR - Placed before the return type in function declarations.
*              Useful for C++11 and GCC/Clang-style function attribute syntax.
* sio_API_CALL - Placed after the return type in function declarations.
*              Useful for MSVC-style calling convention syntax.
* sio_API_PTR  - Placed between the '(' and '*' in function pointer types.
*
* Function declaration:  sio_API_ATTR void sio_API_CALL sio_FN_funcName(void);
* Function pointer type: typedef void (sio_API_PTR *sio_PFN_funcName)(void);
*/
#if defined(_WIN32)
// On Windows, Vulkan commands use the stdcall convention
#define sio_API_ATTR
#define sio_API_CALL __stdcall
#define sio_API_PTR  sio_API_CALL
#elif defined(__ANDROID__) && defined(__ARM_ARCH) && __ARM_ARCH < 7
#error "Vulkan isn't supported for the 'armeabi' NDK ABI"
#elif defined(__ANDROID__) && defined(__ARM_ARCH) && __ARM_ARCH >= 7 && defined(__ARM_32BIT_STATE)
     // On Android 32-bit ARM targets, Vulkan functions use the "hardfloat"
     // calling convention, i.e. float parameters are passed in registers. This
     // is true even if the rest of the application passes floats on the stack,
     // as it does by default when compiling for the armeabi-v7a NDK ABI.
#define sio_API_ATTR __attribute__((pcs("aapcs-vfp")))
#define sio_API_CALL
#define sio_API_PTR  sio_API_ATTR
#else
     // On other platforms, use the default calling convention
#define sio_API_ATTR
#define sio_API_CALL
#define sio_API_PTR
#endif

#include <stddef.h>

#if !defined(sio_NO_STDINT_H)
#if defined(_MSC_VER) && (_MSC_VER < 1600)
    typedef signed   __int8  int8_t;
    typedef unsigned __int8  uint8_t;
    typedef signed   __int16 int16_t;
    typedef unsigned __int16 uint16_t;
    typedef signed   __int32 int32_t;
    typedef unsigned __int32 uint32_t;
    typedef signed   __int64 int64_t;
    typedef unsigned __int64 uint64_t;
#else
#include <stdint.h>
#endif
#endif // !defined(sio_NO_STDINT_H)

#ifdef __cplusplus
} // extern "C"
#endif // __cplusplus

#endif // !SIO_HTTP_PLATFORM_H_
