/*
**copyright (C) 2020 "SHERIFI" Shkelqim Sherifi <sherifi_co@yahoo.com>.
**Boost Software License - Version 1.0 - December 21th, 2019
**
** Licensed under the SHERIFI Inc Private License, Version 1.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.sherifiIO.org/licenses/LICENSE-1.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
**The copyright notices in the Software and this entire statement, including
**the above license grant, this restriction and the following disclaimer,
**must be included in all copies of the Software, in whole or in part, and
**all derivative works of the Software, unless such copies or derivative
**works are solely in the form of machine-executable object code generated by
**a source language processor.
**
**THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
**IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
**FITNESS FOR PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
**AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
**LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
**OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
**SOFTWARE.
**
** This header is generated from the SHERIFI HTTPHypertextTransferProtocol XML API Registry.
**
*/

////////////////////////////////////////////////////////////////////////////////
//        NAME: sio_http_messages.h
// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol parameters
//   ARGUMENTS: N/A
// USES GLOBAL: N/A
// MODIFIES GL: N/A
//     RETURNS: N/A
//      AUTHOR: SHERIFI
// AUTHOR/DATE: GMT Saturday, July 12, 2020
////////////////////////////////////////////////////////////////////////////////
#ifndef SIO_HTTP_MESSAGE_H_
#define SIO_HTTP_MESSAGE_H_ 1

#include <string>
#include <sstream>
#include <assert.h>

#include "sio_http.h"
#include "sio_http_methods.h"
#include "sio_http_parameters.h"
#include "sio_http_status_code.h"
#include "sio_http_header_fields.h"

namespace sio {
	namespace httpMessage {

#define sio_MAX_HTTP_MESSAGES_CHAR								64
#define sio_MAX_HTTP_MESSAGES_INFO_CHAR							sio_MAX_HTTP_MESSAGES_CHAR

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_S_HttpControlers
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef struct sio_S_HttpControlers {
		public:
			void* sio_P_start;
			void* sio_P_privious;
			void* sio_P_current;
			void* sio_P_next;
			void* sio_P_end;
			uint8_t sio_V_count;
			char** sio_PP_list[sio_MAX_HTTP_MESSAGES_INFO_CHAR];
		}sio_S_HttpControlers;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpMessageStartLineRequest
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpMessageStartLineRequest {
			NONE = 0x00000000,
		}sio_E_HttpMessageStartLineRequest;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpMessageStartLineRequest
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpMessageStartLineRequest : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpMessageStartLineRequestResult;
			std::stringstream sio_SS_HttpMessageStartLineRequest;
		public:
			sio_C_HttpMessageStartLineRequest() = delete;
			sio_C_HttpMessageStartLineRequest(
				const char* sio_V_HttpMessage_StartLineRequestString,
				sio_E_HttpMessageStartLineRequest* sio_PE_HttpMessageStartLineRequest,
				sio::httpMethods::sio_C_HttpMethods* sio_PC_HttpMethods,
				sio::httpParameters::sio_C_HttpUniformResourceIdentifier* sio_PC_HttpUniformResourceIdentifier,
				sio::httpParameters::sio_C_HttpVersion* sio_PC_HttpVersion
			);
			std::string sio_FN_GetHttpMessageStartLineRequest();
		}sio_C_HttpMessageStartLineRequest;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpMessageStartLineResponse
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpMessageStartLineResponse {
			NONE = 0x00000000,
		}sio_E_HttpMessageStartLineResponse;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpMessageStartLineResponse
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpMessageStartLineResponse : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpMessageStartLineResponseResult;
			std::stringstream sio_SS_HttpMessageStartLineResponse;
		public:
			sio_C_HttpMessageStartLineResponse() = delete;
			sio_C_HttpMessageStartLineResponse(
				const char* sio_V_HttpMessageStartLineResponseString,
				sio_E_HttpMessageStartLineResponse* sio_PE_HttpMessageStartLineResponse,
				sio::httpParameters::sio_C_HttpVersion* sio_PC_HttpVersion,
				sio::httpStatusCode::sio_C_HttpStatusCode* sio_PC_HttpStatusCode
			);
			std::string sio_FN_GetHttpMessageStartLineResponse();
		}sio_C_HttpMessageStartLineResponse;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpMessageStartLine
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpMessageStartLine {
			NONE = 0x00000000,
			REQUEST_START_LINE = 0x00000001,
			RESPONSE_START_LINE = 0x00000002,
		}sio_E_HttpMessageStartLine;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpMessageStartLine
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpMessageStartLine : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpMessageStartLineResult;
			std::stringstream sio_SS_HttpMessageStartLine;
		public:
			sio_C_HttpMessageStartLine() = delete;
			sio_C_HttpMessageStartLine(
				const char* sio_V_HttpMessageStartLineString,
				sio_E_HttpMessageStartLine* sio_PE_HttpMessageStartLine,
				sio_C_HttpMessageStartLineRequest* sio_PC_HttpMessageStartLineRequest,
				sio_C_HttpMessageStartLineResponse* sio_C_HttpMessageStartLineResponse
			);
			std::string sio_FN_GetHttpMessage_StartLine();
		}sio_C_HttpMessageStartLine;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpMessageHeaderFieldsRequest
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpMessageHeaderFieldsRequest {
			NONE = 0x00000000,
		}sio_E_HttpMessageHeaderFieldsRequest;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpMessageHeaderFieldsRequest
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpMessageHeaderFieldsRequest : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpMessageHeaderFieldsRequestResult;
			std::stringstream sio_SS_HttpMessageHeaderFieldsRequest;
		public:
			sio_C_HttpMessageHeaderFieldsRequest() = delete;
			sio_C_HttpMessageHeaderFieldsRequest(
				sio_E_HttpMessageHeaderFieldsRequest* sio_PE_HttpMessageHeaderFieldsRequest
			);
			std::string sio_FN_GetHttpMessageHeaderFieldsRequest();
		}sio_C_HttpMessageHeaderFieldsRequest;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpMessageHeaderFieldsResponse
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpMessageHeaderFieldsResponse {
			NONE = 0x00000000,
		}sio_E_HttpMessageHeaderFieldsResponse;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpMessageHeaderFieldsResponse
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpMessageHeaderFieldsResponse : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpMessage_HeaderFieldsResponseResult;
			std::stringstream sio_SS_HttpMessageHeaderFieldsResponse;
		public:
			sio_C_HttpMessageHeaderFieldsResponse() = delete;
			sio_C_HttpMessageHeaderFieldsResponse(
				sio_E_HttpMessageHeaderFieldsResponse* sio_PE_HttpMessageHeaderFieldsResponse
			);
			std::string sio_FN_GetHttpMessageHeaderFieldsResponse();
		}sio_C_HttpMessageHeaderFieldsResponse;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpMessageHeaderFields
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpMessageHeaderFields {
			NONE = 0x00000000,
			REQUEST_HEADER_FIELDS = 0x00000001,
			RESPONSE_HEADER_FIELDS = 0x00000002,
		}sio_E_HttpMessageHeaderFields;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpMessageHeaderFields
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpMessageHeaderFields : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpMessageHeaderFieldsResult;
			std::stringstream sio_SS_HttpMessageHeaderFields;
		public:
			sio_C_HttpMessageHeaderFields() = delete;
			sio_C_HttpMessageHeaderFields(
				sio_E_HttpMessageHeaderFields* sio_PE_HttpMessageHeaderFields,
				sio_C_HttpMessageHeaderFieldsRequest* sio_PC_HttpMessageHeaderFieldsRequest,
				sio_C_HttpMessageHeaderFieldsResponse* sio_C_HttpMessageHeaderFieldsResponse
			);
			std::string sio_FN_GetHttpMessage_HeaderFields();
		}sio_C_HttpMessageHeaderFields;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpMessageMessageBodyRequest
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpMessageMessageBodyRequest {
			NONE = 0x00000000,
		}sio_E_HttpMessageMessageBodyRequest;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpMessageMessageBodyRequest
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpMessageMessageBodyRequest : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpMessageMessageBodyRequestResult;
			std::stringstream sio_SS_HttpMessageMessageBodyRequest;
		public:
			sio_C_HttpMessageMessageBodyRequest() = delete;
			sio_C_HttpMessageMessageBodyRequest(
				const char* sio_V_HttpMessageMessageBodyRequestString,
				sio_E_HttpMessageMessageBodyRequest* sio_PE_HttpMessageMessageBodyRequest
			);
			std::string sio_FN_GetHttpMessageMessageBodyRequest();
		}sio_C_HttpMessageMessageBodyRequest;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpMessageMessageBodyResponse
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpMessageMessageBodyResponse {
			NONE = 0x00000000,
		}sio_E_HttpMessageMessageBodyResponse;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpMessageMessageBodyResponse
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpMessageMessageBodyResponse : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpMessageMessageBodyResponseResult;
			std::stringstream sio_SS_HttpMessageMessageBodyResponse;
		public:
			sio_C_HttpMessageMessageBodyResponse() = delete;
			sio_C_HttpMessageMessageBodyResponse(
				const char* sio_V_HttpMessageMessageBodyResponseString,
				sio_E_HttpMessageMessageBodyResponse* sio_PE_HttpMessageMessageBodyResponse
			);
			std::string sio_FN_GetHttpMessageMessageBodyResponse();
		}sio_C_HttpMessageMessageBodyResponse;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpMessageMessageBody
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpMessageMessageBody {
			NONE = 0x00000000,
			REQUEST_MESSAGE_BODY = 0x00000001,
			RESPONSE_MESSAGE_BODY = 0x00000002,
		}sio_E_HttpMessageMessageBody;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpMessageMessageBody
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpMessageMessageBody : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpMessageMessageBodyResult;
			std::stringstream sio_SS_HttpMessageMessageBody;
		public:
			sio_C_HttpMessageMessageBody() = delete;
			sio_C_HttpMessageMessageBody(
				sio_E_HttpMessageMessageBody* sio_PE_HttpMessageMessageBody,
				sio_C_HttpMessageMessageBodyRequest* sio_PC_HttpMessageMessageBodyRequest,
				sio_C_HttpMessageMessageBodyResponse* sio_C_HttpMessageMessageBodyResponse
			);
			std::string sio_FN_GetHttpMessage_MessageBody();
		}sio_C_HttpMessageMessageBody;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpMessage
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpMessage {
			NONE = 0x00000000,
			MESSAGE_START_LINE = 0x00000001,
			MESSAGE_HEADER_FIELDS = 0x00000002,
			MESSAGE_BODY_MESSAGE = 0x00000004,
		}sio_E_HttpMessage;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpMessage
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpMessage : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpMessageResult;
			std::stringstream sio_SS_HttpMessage;
		public:
			sio_C_HttpMessage() = delete;
			sio_C_HttpMessage(
				const char* sio_V_HttpMessageString,
				sio_E_HttpMessage* sio_PE_HttpMessage,
				sio_C_HttpMessageStartLine* sio_PC_HttpMessageStartLine,
				sio_C_HttpMessageHeaderFields* sio_PC_HttpMessageHeaderFields,
				sio_C_HttpMessageMessageBody* sio_PC_HttpMessageMessageBody
			);
			std::string sio_FN_GetHttpMessage();
		}sio_C_HttpMessage;

		/*
		typedef void(sio_API_PTR* sio_PFN_WriteInfo)(sio_S_Info* sio_PS_Info);

		sio_API_ATTR void sio_API_CALL sio_FN_WriteInfo(
			sio_S_Info* sio_PS_Info
		);

		typedef sio_Result(sio_API_PTR* sio_PFN_DeleteInfo)(sio_S_Info* sio_PS_Info, sio_S_Company* sio_PS_Company, sio_S_Management* sio_PS_Managemnet);

		sio_API_ATTR sio_Result sio_API_CALL sio_FN_DeleteInfo(
			sio_S_Info* sio_PS_Info,
			sio_S_Company* sio_PS_Company,
			sio_S_Management* sio_PS_Managemnet
		);
		*/
	} //namespace HttpMessage
}//namespace sio

#endif // !SIO_HTTP_MESSAGE_H_

