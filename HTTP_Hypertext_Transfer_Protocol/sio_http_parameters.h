/*
**copyright (C) 2020 "SHERIFI" Shkelqim Sherifi <sherifi_co@yahoo.com>.
**Boost Software License - Version 1.0 - December 21th, 2019
**
** Licensed under the SHERIFI Inc Private License, Version 1.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.sherifiIO.org/licenses/LICENSE-1.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
**The copyright notices in the Software and this entire statement, including
**the above license grant, this restriction and the following disclaimer,
**must be included in all copies of the Software, in whole or in part, and
**all derivative works of the Software, unless such copies or derivative
**works are solely in the form of machine-executable object code generated by
**a source language processor.
**
**THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
**IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
**FITNESS FOR PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
**AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
**LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
**OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
**SOFTWARE.
**
** This header is generated from the SHERIFI HTTPHypertextTransferProtocol XML API Registry.
**
*/

////////////////////////////////////////////////////////////////////////////////
//        NAME: sio_http_parameters.h
// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol parameters
//   ARGUMENTS: N/A
// USES GLOBAL: N/A
// MODIFIES GL: N/A
//     RETURNS: N/A
//      AUTHOR: SHERIFI
// AUTHOR/DATE: GMT Saturday, July 12, 2020
////////////////////////////////////////////////////////////////////////////////
#ifndef SIO_HTTP_PARAMETERS_H_
#define SIO_HTTP_PARAMETERS_H_ 1

#include <string>
#include <sstream>
#include <assert.h>
#include <ctime>

#include "sio_http.h"

namespace sio {
	namespace httpParameters {

#define sio_MAX_HTTP_PARAMETERS_CHAR								64
#define sio_MAX_HTTP_PARAMETERS_INFO_CHAR							sio_MAX_HTTP_PARAMETERS_CHAR

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_S_HttpControlers
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef struct sio_S_HttpControlers {
		public:
			void* sio_P_start;
			void* sio_P_privious;
			void* sio_P_current;
			void* sio_P_next;
			void* sio_P_end;
			uint8_t sio_V_count;
			char** sio_PP_list[sio_MAX_HTTP_PARAMETERS_INFO_CHAR];
		}sio_S_HttpControlers;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpVersion
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpVersion {
			NONE = 0x00000000,
		}sio_E_HttpVersion;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpVersion
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpVersion : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			uint8_t sio_V_major;
			uint8_t sio_V_minor;
			std::string sio_V_HttpVersionResult;
			std::stringstream sio_SS_HttpVersion;
		public:
			sio_C_HttpVersion() = delete;
			sio_C_HttpVersion(
				const char* sio_CV_name,
				uint8_t sio_CV_major,
				uint8_t sio_CV_minor
			);
			std::string sio_FN_GetHttpVersion();
		}sio_C_HttpVersion;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpUniformResourceIdentifier
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpUniformResourceIdentifier {
			NONE = 0x00000000,
		}sio_E_HttpUniformResourceIdentifier;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpUniformResourceIdentifier
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpUniformResourceIdentifier : sio_S_HttpControlers {
		private:
			const char* sio_V_protocolName;
			const char* sio_V_host;
			uint8_t sio_V_port;
			const char* sio_V_absPath;
			const char* sio_V_query;
			std::string sio_V_HttpUniformResourceIdentifierResult;
			std::stringstream sio_SS_HttpUniformResourceIdentifier;
		public:
			sio_C_HttpUniformResourceIdentifier() = delete;
			sio_C_HttpUniformResourceIdentifier(
				const char* sio_CV_protocolName,
				const char* sio_CV_host,
				uint8_t sio_CV_port,
				const char* sio_CV_absPath,
				const char* sio_CV_query
			);
			std::string sio_FN_GetHttpUniformResourceIdentifiers();
		}sio_C_HttpUniformResourceIdentifier;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpDateTimeFormat
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpDateTimeFormat {
			NONE =								0x00000000,
			RFC822 =							0x00000001,
			RFC850 =							0x00000002,
			ANSI =								0x00000004
		}sio_E_HttpDateTimeFormat;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpDateTimeFormat
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpDateTimeFormat : sio_S_HttpControlers {
		private:
			time_t now;
			std::string sio_V_HttpDateTimeFormatResult;
			std::stringstream sio_SS_HttpDateTimeFormat;
		public:
			sio_C_HttpDateTimeFormat() = delete;
			sio_C_HttpDateTimeFormat(sio_E_HttpDateTimeFormat* sio_RE_HttpDateTimeFormat);
			std::string sio_FN_GetHttpDateTimeFormat();
		}sio_C_HttpDateTimeFormat;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpCharacterSets
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpCharacterSets {
			NONE =								0x00000000,
			US_ASCII =							0x00000001,
			ISO_8859_1 =						0x00000002,
			ISO_8859_7 =						0x00000004
		}sio_E_HttpCharacterSets;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpCharacterSets
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpCharacterSets : sio_S_HttpControlers {
		private:
			std::string sio_V_HttpCharacterSetsResult;
			std::stringstream sio_SS_HttpCharacterSets;
		public:
			sio_C_HttpCharacterSets() = delete;
			sio_C_HttpCharacterSets(sio_E_HttpCharacterSets* sio_RE_HttpCharacterSets);
			std::string sio_FN_GetHttpCharacterSets();
		}sio_C_HttpCharacterSets;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpContentEncodings
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpContentEncodings {
			NONE =								0x00000000,
			GZIP =								0x00000001,
			COMPRESS =							0x00000002,
			DEFLATE =							0x00000004
		}sio_E_HttpContentEncodings;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpContentEncodings
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpContentEncodings : sio_S_HttpControlers {
		private:
			std::string sio_V_HttpContentEncodingsResult;
			std::stringstream sio_SS_HttpContentEncodings;
		public:
			sio_C_HttpContentEncodings() = delete;
			sio_C_HttpContentEncodings(sio_E_HttpContentEncodings* sio_PE_HttpContentEncodings);
			std::string sio_FN_GetHttpContentEncodings();
		}sio_C_HttpContentEncodings;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpMediaType
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpMediaType {
			NONE =								0x00000000,
			CONTENT_TYPE =						0x00000001,
			ACCEPT =							0x00000002,
		}sio_E_HttpMediaType;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpMediaType
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpMediaType : sio_S_HttpControlers {
		private:
			const char* sio_V_mediaType;
			const char* sio_V_mediaSubtype;
			const char* sio_V_mediaParameter;
			std::string sio_V_HttpMediaTypeResult;
			std::stringstream sio_SS_HttpMediaType;
		public:
			sio_C_HttpMediaType() = delete;
			sio_C_HttpMediaType(
				const char* sio_FV_mediaType,
				const char* sio_FV_mediaSubtype,
				const char* sio_FV_mediaParameter,
				sio_E_HttpMediaType* sio_PE_HttpMediaType
			);
			std::string sio_FN_GetHttpMediaType();
		}sio_C_HttpMediaType;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpLanguageTags
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpLanguageTags {
			NONE =							0x00000000,
			ACCEPT_LANGUAGE =				0x00000001,
			CONTENT_LANGUAGE=				0x00000002,
		}sio_E_HttpLanguageTags;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpLanguageTags
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpLanguageTags : sio_S_HttpControlers {
		private:
			const char* sio_V_primaryTag;
			const char* sio_V_subTag;
			std::string sio_V_HttpLanguageTagsResult;
			std::stringstream sio_SS_HttpLanguageTags;
		public:
			sio_C_HttpLanguageTags() = delete;
			sio_C_HttpLanguageTags(
				const char* sio_FV_primaryTag,
				const char* sio_FV_subTag,
				sio_E_HttpLanguageTags* sio_PE_HttpLanguageTags
			);
			std::string sio_FN_GetHttpLanguageTags();
		}sio_C_HttpLanguageTags;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpParameters
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpParameters {
			NONE = 0x00000000,
			HTTP_VERSION = 0x00000001,
			UNIFORM_RESOURCE_IDENTIFIERS = 0x00000002,
			DATA_TIME_FORMATS = 0x00000004,
			CHARACTER_SETS = 0x00000008,
			CONTENT_ENCODINGS = 0x00000010,
			MEDIA_TYPES = 0x00000020,
			LANGUAGE_TAGS = 0x00000040,
		}sio_E_HttpParameters;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpParameters
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpParameters : sio_S_HttpControlers {
		private:
			std::string sio_V_HttpParametersResult;
			std::stringstream sio_SS_HttpParameters;
		public:
			sio_C_HttpParameters() = delete;
			sio_C_HttpParameters(
				sio_E_HttpParameters* sio_PE_HttpParameters
			);
			std::string sio_FN_GetHttpParameters();
		}sio_C_HttpParameters;

		/*
		typedef void(sio_API_PTR* sio_PFN_WriteInfo)(sio_S_Info* sio_PS_Info);

		sio_API_ATTR void sio_API_CALL sio_FN_WriteInfo(
			sio_S_Info* sio_PS_Info
		);

		typedef sio_Result(sio_API_PTR* sio_PFN_DeleteInfo)(sio_S_Info* sio_PS_Info, sio_S_Company* sio_PS_Company, sio_S_Management* sio_PS_Managemnet);

		sio_API_ATTR sio_Result sio_API_CALL sio_FN_DeleteInfo(
			sio_S_Info* sio_PS_Info,
			sio_S_Company* sio_PS_Company,
			sio_S_Management* sio_PS_Managemnet
		);
		*/
	} //namespace httpParameters
}//namespace sio

#endif // !SIO_HTTP_PARAMETERS_H_
