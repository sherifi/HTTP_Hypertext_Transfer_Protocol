/*
**copyright (C) 2020 "SHERIFI" Shkelqim Sherifi <sherifi_co@yahoo.com>.
**Boost Software License - Version 1.0 - December 21th, 2019
**
** Licensed under the SHERIFI Inc Private License, Version 1.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.sherifiIO.org/licenses/LICENSE-1.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
**The copyright notices in the Software and this entire statement, including
**the above license grant, this restriction and the following disclaimer,
**must be included in all copies of the Software, in whole or in part, and
**all derivative works of the Software, unless such copies or derivative
**works are solely in the form of machine-executable object code generated by
**a source language processor.
**
**THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
**IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
**FITNESS FOR PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
**AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
**LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
**OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
**SOFTWARE.
**
** This header is generated from the SHERIFI HTTPHypertextTransferProtocol XML API Registry.
**
*/

////////////////////////////////////////////////////////////////////////////////
//        NAME: sio_http_header_fields.h
// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
//   ARGUMENTS: N/A
// USES GLOBAL: N/A
// MODIFIES GL: N/A
//     RETURNS: N/A
//      AUTHOR: SHERIFI
// AUTHOR/DATE: GMT Saturday, July 12, 2020
////////////////////////////////////////////////////////////////////////////////
#ifndef SIO_HTTP_HEADER_FIELDS_H_
#define SIO_HTTP_HEADER_FIELDS_H_ 1

#include <string>
#include <sstream>
#include <assert.h>
#include <ctime>

#include "sio_http.h"
#include "Utility/Crypto/sio_http_base64.h"

namespace sio {
	namespace httpHeaderFields {

#define sio_MAX_HTTP_HEADER_FIELDS_CHAR								64
#define sio_MAX_HTTP_HEADER_FIELDS_INFO_CHAR							sio_MAX_HTTP_HEADER_FIELDS_CHAR

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpHeaderFields
		// DESCRIPTION: This is the structure create to hold all the Header Fields related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef struct sio_S_HttpControlers {
		public:
			void* sio_P_start;
			void* sio_P_privious;
			void* sio_P_current;
			void* sio_P_next;
			void* sio_P_end;
			uint8_t sio_V_count;
			char** sio_PP_list[sio_MAX_HTTP_HEADER_FIELDS_INFO_CHAR];
		}sio_S_HttpControlers;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpGeneralHeaderCacheControlRequestDirective
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpGeneralHeaderCacheControlRequestDirective {
			NONE = 0x00000000,
			NO_CACHE_REQ = 0x00000001,
			NO_STORE_REQ = 0x00000002,
			MAX_AGE_REQ = 0x00000004,
			MAX_STALE_REQ = 0x00000008,
			MIN_FRESH_REQ = 0x00000010,
			NO_TRANSFORM_REQ = 0x00000020,
			ONLY_IF_CACHED_REQ = 0x00000040
		}sio_E_HttpGeneralHeaderCacheControlRequestDirective;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpGeneralHeaderCacheControlRequestDirective
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpGeneralHeaderCacheControlRequestDirective : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpGeneralHeaderCacheControlRequestDirectiveDescription;
			std::string sio_V_HttpGeneralHeaderCacheControlRequestDirectiveResult;
			std::stringstream sio_SS_HttpGeneralHeaderCacheControlRequestDirective;
		public:
			sio_C_HttpGeneralHeaderCacheControlRequestDirective() = delete;
			sio_C_HttpGeneralHeaderCacheControlRequestDirective(sio_E_HttpGeneralHeaderCacheControlRequestDirective* sio_PE_HttpGeneralHeaderCacheControlRequestDirective, uint32_t sec);
			std::string sio_FN_GetHttpGeneralHeaderCacheControlRequestDirective();
			std::string sio_FN_GetHttpGeneralHeaderCacheControlRequestDirectiveDescription();
		}sio_C_HttpGeneralHeaderCacheControlRequestDirective;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpGeneralHeaderCacheControlResponseDirective
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpGeneralHeaderCacheControlResponseDirective {
			NONE = 0x00000000,
			PUBLIC_RES = 0x00000001,
			PRIVATE_RES = 0x00000002,
			NO_CACHE_RES = 0x00000004,
			NO_STORE_RES = 0x00000008,
			NO_TRANSFORM_RES = 0x00000010,
			MUST_REVALIDATE_RES = 0x00000020,
			PROXY_REVALIDATE_RES = 0x00000040,
			MAX_AGE_RES = 0x00000080,
			S_MAXAGE_RES = 0x00000100
		}sio_E_HttpGeneralHeaderCacheControlResponseDirective;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpGeneralHeaderCacheControlResponseDirective
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpGeneralHeaderCacheControlResponseDirective : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpGeneralHeaderCacheControlResponseDirectiveDescription;
			std::string sio_V_HttpGeneralHeaderCacheControlResponseDirectiveResult;
			std::stringstream sio_SS_HttpGeneralHeaderCacheControlResponseDirective;
		public:
			sio_C_HttpGeneralHeaderCacheControlResponseDirective() = delete;
			sio_C_HttpGeneralHeaderCacheControlResponseDirective(sio_E_HttpGeneralHeaderCacheControlResponseDirective* sio_PE_HttpGeneralHeaderCacheControlResponseDirective, uint32_t sec);
			std::string sio_FN_GetHttpGeneralHeaderCacheControlResponseDirective();
			std::string sio_FN_GetHttpGeneralHeaderCacheControlResponseDirectiveDescription();
		}sio_C_HttpGeneralHeaderCacheControlResponseDirective;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpGeneralHeaderCacheControl
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpGeneralHeaderCacheControl {
			NONE = 0x00000000,
			CACHE_REQUEST_DIRECTIVE = 0x00000001,
			CACHE_RESPONSE_DIRECTIVE = 0x00000002
		}sio_E_HttpGeneralHeaderCacheControl;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpGeneralHeaderCacheControl
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpGeneralHeaderCacheControl : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpGeneralHeaderCacheControlResult;
			std::stringstream sio_SS_HttpGeneralHeaderCacheControl;
		public:
			sio_C_HttpGeneralHeaderCacheControl() = delete;
			sio_C_HttpGeneralHeaderCacheControl(
				sio_E_HttpGeneralHeaderCacheControl* sio_PE_HttpGeneralHeaderCacheControl,
				sio_C_HttpGeneralHeaderCacheControlRequestDirective* sio_PC_HttpGeneralHeaderCacheControlRequestDirective,
				sio_C_HttpGeneralHeaderCacheControlResponseDirective* sio_PC_HttpGeneralHeaderCacheControlResponseDirective
				);
			std::string sio_FN_GetHttpGeneralHeaderCacheControl();
		}sio_C_HttpGeneralHeaderCacheControl;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpGeneralHeaderConnection
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpGeneralHeaderConnection {
			NONE = 0x00000000,
			CLOSE = 0x00000001,
			KEEP_ALIVE = 0x00000002
		}sio_E_HttpGeneralHeaderConnection;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpGeneralHeaderConnection
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpGeneralHeaderConnection : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpGeneralHeaderConnectionResult;
			std::stringstream sio_SS_HttpGeneralHeaderConnection;
		public:
			sio_C_HttpGeneralHeaderConnection() = delete;
			sio_C_HttpGeneralHeaderConnection(sio_E_HttpGeneralHeaderConnection* sio_PE_HttpGeneralHeaderConnection);
			std::string sio_FN_GetHttpGeneralHeaderConnection();
		}sio_C_HttpGeneralHeaderConnection;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpGeneralHeaderDate
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpGeneralHeaderDate {
			NONE = 0x00000000,
			RFC822 = 0x00000001,
			RFC850 = 0x00000002,
			ANSI = 0x00000004

		}sio_E_HttpGeneralHeaderDate;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpGeneralHeaderDate
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpGeneralHeaderDate : sio_S_HttpControlers {
		private:
			time_t now;
			const char* sio_V_name;
			std::string sio_V_HttpGeneralHeaderDateResult;
			std::stringstream sio_SS_HttpGeneralHeaderDate;
		public:
			sio_C_HttpGeneralHeaderDate() = delete;
			sio_C_HttpGeneralHeaderDate(sio_E_HttpGeneralHeaderDate* sio_PE_HttpGeneralHeaderDate);
			std::string sio_FN_GetHttpGeneralHeaderDate();
		}sio_C_HttpGeneralHeaderDate;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpGeneralHeaderPragma
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpGeneralHeaderPragma {
			NONE = 0x00000000,
		}sio_E_HttpGeneralHeaderPragma;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpGeneralHeaderPragma
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpGeneralHeaderPragma : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpGeneralHeaderPragmaResult;
			std::stringstream sio_SS_HttpGeneralHeaderPragma;
		public:
			sio_C_HttpGeneralHeaderPragma() = delete;
			sio_C_HttpGeneralHeaderPragma(
				const char* sio_V_httpGeneralHeaderPragma,
				sio_E_HttpGeneralHeaderPragma* sio_PE_HttpGeneralHeaderPragma
			);
			sio_C_HttpGeneralHeaderPragma& Add(
				const char* sio_V_httpGeneralHeaderPragma,
				sio_E_HttpGeneralHeaderPragma* sio_PE_HttpGeneralHeaderPragma
			);
			std::string sio_FN_GetHttpGeneralHeaderPragma();
		}sio_C_HttpGeneralHeaderPragma;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpGeneralHeaderTrailer
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpGeneralHeaderTrailer {
			NONE = 0x00000000,
		}sio_E_HttpGeneralHeaderTrailer;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpGeneralHeaderTrailer
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpGeneralHeaderTrailer : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpGeneralHeaderTrailerResult;
			std::stringstream sio_SS_HttpGeneralHeaderTrailer;
		public:
			sio_C_HttpGeneralHeaderTrailer() = delete;
			sio_C_HttpGeneralHeaderTrailer(sio_E_HttpGeneralHeaderTrailer* sio_PE_HttpGeneralHeaderTrailer);
			std::string sio_FN_GetHttpGeneralHeaderTrailer();
		}sio_C_HttpGeneralHeaderTrailer;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpGeneralHeaderTransferEncoding
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpGeneralHeaderTransferEncoding {
			NONE = 0x00000000,
			CHUNKED = 0x00000001,
		}sio_E_HttpGeneralHeaderTransferEncoding;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpGeneralHeaderTransferEncoding
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpGeneralHeaderTransferEncoding : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpGeneralHeaderTransferEncodingResult;
			std::stringstream sio_SS_HttpGeneralHeaderTransferEncoding;
		public:
			sio_C_HttpGeneralHeaderTransferEncoding() = delete;
			sio_C_HttpGeneralHeaderTransferEncoding(sio_E_HttpGeneralHeaderTransferEncoding* sio_PE_HttpGeneralHeaderTransferEncoding);
			std::string sio_FN_GetHttpGeneralHeaderTransferEncoding();
		}sio_C_HttpGeneralHeaderTransferEncoding;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpGeneralHeaderUpgrade
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpGeneralHeaderUpgrade {
			NONE = 0x00000000,
			HTTP_2_0 = 0x00000001,
			SHTTP_1_3 = 0x00000002,
			IRC_6_9 = 0x00000004,
			RTA_X11 = 0x00000008,
		}sio_E_HttpGeneralHeaderUpgrade;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpGeneralHeaderUpgrade
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpGeneralHeaderUpgrade : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpGeneralHeaderUpgradeResult;
			std::stringstream sio_SS_HttpGeneralHeaderUpgrade;
		public:
			sio_C_HttpGeneralHeaderUpgrade() = delete;
			sio_C_HttpGeneralHeaderUpgrade(sio_E_HttpGeneralHeaderUpgrade* sio_PE_HttpGeneralHeaderUpgrade);
			std::string sio_FN_GetHttpGeneralHeaderUpgrade();
		}sio_C_HttpGeneralHeaderUpgrade;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpGeneralHeaderVia
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpGeneralHeaderVia {
			NONE = 0x00000000,
		}sio_E_HttpGeneralHeaderVia;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpGeneralHeaderVia
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpGeneralHeaderVia : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpGeneralHeaderViaResult;
			std::stringstream sio_SS_HttpGeneralHeaderVia;
		public:
			sio_C_HttpGeneralHeaderVia() = delete;
			sio_C_HttpGeneralHeaderVia(
				const char* sio_V_httpGeneralHeaderVia,
				sio_E_HttpGeneralHeaderVia* sio_PE_HttpGeneralHeaderVia
			);
			sio_C_HttpGeneralHeaderVia& Add(
				const char* sio_V_httpGeneralHeaderVia,
				sio_E_HttpGeneralHeaderVia* sio_PE_HttpGeneralHeaderVia
			);
			std::string sio_FN_GetHttpGeneralHeaderVia();
		}sio_C_HttpGeneralHeaderVia;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpGeneralHeaderWarning
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpGeneralHeaderWarning {
			NONE = 0x00000000,
		}sio_E_HttpGeneralHeaderWarning;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpGeneralHeaderWarning
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpGeneralHeaderWarning : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpGeneralHeaderWarningResult;
			std::stringstream sio_SS_HttpGeneralHeaderWarning;
		public:
			sio_C_HttpGeneralHeaderWarning() = delete;
			sio_C_HttpGeneralHeaderWarning(
				const char* sio_V_HttpGeneralHeaderWarnCode,
				const char* sio_V_HttpGeneralHeaderWarnAgent,
				const char* sio_V_HttpGeneralHeaderWarnText,
				const char* sio_V_HttpGeneralHeaderWarnData,
				sio_E_HttpGeneralHeaderWarning* sio_PE_HttpGeneralHeaderWarning
			);
			std::string sio_FN_GetHttpGeneralHeaderWarning();
		}sio_C_HttpGeneralHeaderWarning;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpGeneralHeader
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpGeneralHeader {
			NONE = 0x00000000,
			CACHE_CONTROL = 0x00000001,
			CONNECTION = 0x00000002,
			DATE = 0x00000004,
			PRAGMA = 0x00000008,
			TRAILER = 0x00000010,
			TRANSFER_ENCODING = 0x00000020,
			UPGRADE = 0x00000040,
			VIA = 0x00000080,
			WARNING = 0x00000100
		}sio_E_HttpGeneralHeader;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpGeneralHeader
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpGeneralHeader : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpGeneralHeaderResult;
			std::stringstream sio_SS_HttpGeneralHeader;
		public:
			sio_C_HttpGeneralHeader() = delete;
			sio_C_HttpGeneralHeader(
				sio_E_HttpGeneralHeader* sio_PE_HttpGeneralHeader,
				sio_C_HttpGeneralHeaderCacheControl* sio_PC_HttpGeneralHeaderCacheControl,
				sio_C_HttpGeneralHeaderConnection* sio_PC_HttpGeneralHeaderConnection,
				sio_C_HttpGeneralHeaderDate* sio_PC_HttpGeneralHeaderDate,
				sio_C_HttpGeneralHeaderPragma* sio_PC_HttpGeneralHeaderPragma,
				sio_C_HttpGeneralHeaderTrailer* sio_PC_HttpGeneralHeaderTrailer,
				sio_C_HttpGeneralHeaderTransferEncoding* sio_PC_HttpGeneralHeaderTransferEncoding,
				sio_C_HttpGeneralHeaderUpgrade* sio_PC_HttpGeneralHeaderUpgrade,
				sio_C_HttpGeneralHeaderVia* sio_PC_HttpGeneralHeaderVia,
				sio_C_HttpGeneralHeaderWarning* sio_PC_HttpGeneralHeaderWarning
			);
			std::string sio_FN_GetHttpGeneralHeader();
		}sio_C_HttpGeneralHeader;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpClientRequestHeaderAccept
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpClientRequestHeaderAccept {
			NONE = 0x00000000,
		}sio_E_HttpClientRequestHeaderAccept;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpClientRequestHeaderAccept
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpClientRequestHeaderAccept : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpClientRequestHeaderAcceptResult;
			std::stringstream sio_SS_HttpClientRequestHeaderAccept;
		public:
			sio_C_HttpClientRequestHeaderAccept() = delete;
			sio_C_HttpClientRequestHeaderAccept(
				const char* sio_V_httpClientRequestHeaderAcceptType,
				const char* sio_V_httpClientRequestHeaderAcceptSubtype,
				float sio_V_httpClientRequestHeaderAcceptQvalue,
				sio_E_HttpClientRequestHeaderAccept* sio_PE_HttpClientRequestHeaderAccept
			);
			sio_C_HttpClientRequestHeaderAccept& Add(
				const char* sio_V_httpClientRequestHeaderAcceptType,
				const char* sio_V_httpClientRequestHeaderAcceptSubtype,
				float sio_V_httpClientRequestHeaderAcceptQvalue,
				sio_E_HttpClientRequestHeaderAccept* sio_PE_HttpClientRequestHeaderAccept
			);
			std::string sio_FN_GetHttpClientRequestHeaderAccept();
		}sio_C_HttpClientRequestHeaderAccept;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpClientRequestHeaderAcceptCharset
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpClientRequestHeaderAcceptCharset {
			NONE = 0x00000000,
			ISO_8859_5 = 0x00000001,
			UNICODE_1_1 = 0x00000002,
		}sio_E_HttpClientRequestHeaderAcceptCharset;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpClientRequestHeaderAcceptCharset
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpClientRequestHeaderAcceptCharset : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpClientRequestHeaderAcceptCharsetResult;
			std::stringstream sio_SS_HttpClientRequestHeaderAcceptCharset;
		public:
			sio_C_HttpClientRequestHeaderAcceptCharset() = delete;
			sio_C_HttpClientRequestHeaderAcceptCharset(
				const char* sio_V_httpClientRequestHeaderAcceptCharsetCharacterSet,
				float sio_V_httpClientRequestHeaderAcceptCharsetQvalue,
				sio_E_HttpClientRequestHeaderAcceptCharset* sio_PE_HttpClientRequestHeaderAcceptCharset
			);
			std::string sio_FN_GetHttpClientRequestHeaderAcceptCharset();
		}sio_C_HttpClientRequestHeaderAcceptCharset;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpClientRequestHeaderAcceptEncoding
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpClientRequestHeaderAcceptEncoding {
			NONE = 0x00000000,
			COMPRESS = 0x00000001,
			GZIP = 0x00000002,
			IDENTITY = 0x00000004,
			ALL = 0x00000008,
		}sio_E_HttpClientRequestHeaderAcceptEncoding;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpClientRequestHeaderAcceptEncoding
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpClientRequestHeaderAcceptEncoding : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpClientRequestHeaderAcceptEncodingResult;
			std::stringstream sio_SS_HttpClientRequestHeaderAcceptEncoding;
		public:
			sio_C_HttpClientRequestHeaderAcceptEncoding() = delete;
			sio_C_HttpClientRequestHeaderAcceptEncoding(
				float sio_V_httpClientRequestHeaderAcceptEncodingQvalue,
				sio_E_HttpClientRequestHeaderAcceptEncoding* sio_PE_HttpClientRequestHeaderAcceptEncoding
			);
			sio_C_HttpClientRequestHeaderAcceptEncoding& Add(
				float sio_V_httpClientRequestHeaderAcceptEncodingQvalue,
				sio_E_HttpClientRequestHeaderAcceptEncoding* sio_PE_HttpClientRequestHeaderAcceptEncoding
			);
			std::string sio_FN_GetHttpClientRequestHeaderAcceptEncoding();
		}sio_C_HttpClientRequestHeaderAcceptEncoding;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpClientRequestHeaderAcceptLanguage
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpClientRequestHeaderAcceptLanguage {
			NONE = 0x00000000,
			EN_US = 0x00000001,
			EN = 0x00000002,
			EN_GB = 0x00000004,
			DA = 0x00000008,
		}sio_E_HttpClientRequestHeaderAcceptLanguage;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpClientRequestHeaderAcceptLanguage
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpClientRequestHeaderAcceptLanguage : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpClientRequestHeaderAcceptLanguageResult;
			std::stringstream sio_SS_HttpClientRequestHeaderAcceptLanguage;
		public:
			sio_C_HttpClientRequestHeaderAcceptLanguage() = delete;
			sio_C_HttpClientRequestHeaderAcceptLanguage(
				float sio_V_httpClientRequestHeaderAcceptLanguageQvalue,
				sio_E_HttpClientRequestHeaderAcceptLanguage* sio_PE_HttpClientRequestHeaderAcceptLanguage
			);
			sio_C_HttpClientRequestHeaderAcceptLanguage& Add(
				float sio_V_httpClientRequestHeaderAcceptLanguageQvalue,
				sio_E_HttpClientRequestHeaderAcceptLanguage* sio_PE_HttpClientRequestHeaderAcceptLanguage
			);
			std::string sio_FN_GetHttpClientRequestHeaderAcceptLanguage();
		}sio_C_HttpClientRequestHeaderAcceptLanguage;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpClientRequestHeaderAuthorization
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpClientRequestHeaderAuthorization {
			NONE = 0x00000000,
		}sio_E_HttpClientRequestHeaderAuthorization;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpClientRequestHeaderAuthorization
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpClientRequestHeaderAuthorization : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpClientRequestHeaderAuthorizationResult;
			std::stringstream sio_SS_HttpClientRequestHeaderAuthorization;
		public:
			sio_C_HttpClientRequestHeaderAuthorization() = delete;
			sio_C_HttpClientRequestHeaderAuthorization(
				const char* sio_V_HttpClientRequestHeaderAuthorizationType,
				const unsigned char* sio_V_HttpClientRequestHeaderAuthorizationUsername,
				const unsigned char* sio_V_HttpClientRequestHeaderAuthorizationPassword,
				sio_E_HttpClientRequestHeaderAuthorization* sio_PE_HttpClientRequestHeaderAuthorization
			);
			std::string sio_FN_GetHttpClientRequestHeaderAuthorization();
		}sio_C_HttpClientRequestHeaderAuthorization;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpClientRequestHeaderCookie
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpClientRequestHeaderCookie {
			NONE = 0x00000000,
		}sio_E_HttpClientRequestHeaderCookie;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpClientRequestHeaderCookie
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpClientRequestHeaderCookie : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpClientRequestHeaderCookieResult;
			std::stringstream sio_SS_HttpClientRequestHeaderCookie;
		public:
			sio_C_HttpClientRequestHeaderCookie() = delete;
			sio_C_HttpClientRequestHeaderCookie(
				const char* sio_V_HttpClientRequestHeaderCookieName,
				const char* sio_V_HttpClientRequestHeaderCookieValue,
				sio_E_HttpClientRequestHeaderCookie* sio_PE_HttpClientRequestHeaderCookie
			);
			sio_C_HttpClientRequestHeaderCookie& Add(
				const char* sio_V_HttpClientRequestHeaderCookieName,
				const char* sio_V_HttpClientRequestHeaderCookieValue,
				sio_E_HttpClientRequestHeaderCookie* sio_PE_HttpClientRequestHeaderCookie
			);
			std::string sio_FN_GetHttpClientRequestHeaderCookie();
		}sio_C_HttpClientRequestHeaderCookie;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpClientRequestHeaderExpect
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpClientRequestHeaderExpect {
			NONE = 0x00000000,
		}sio_E_HttpClientRequestHeaderExpect;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpClientRequestHeaderExpect
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpClientRequestHeaderExpect : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpClientRequestHeaderExpectResult;
			std::stringstream sio_SS_HttpClientRequestHeaderExpect;
		public:
			sio_C_HttpClientRequestHeaderExpect() = delete;
			sio_C_HttpClientRequestHeaderExpect(sio_E_HttpClientRequestHeaderExpect* sio_PE_HttpClientRequestHeaderExpect);
			std::string sio_FN_GetHttpClientRequestHeaderExpect();
		}sio_C_HttpClientRequestHeaderExpect;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpClientRequestHeaderFrom
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpClientRequestHeaderFrom {
			NONE = 0x00000000,
		}sio_E_HttpClientRequestHeaderFrom;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpClientRequestHeaderFrom
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpClientRequestHeaderFrom : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpClientRequestHeaderFromResult;
			std::stringstream sio_SS_HttpClientRequestHeaderFrom;
		public:
			sio_C_HttpClientRequestHeaderFrom() = delete;
			sio_C_HttpClientRequestHeaderFrom(
				const char* sio_V_HttpClientRequestHeaderFromEmail,
				sio_E_HttpClientRequestHeaderFrom* sio_PE_HttpClientRequestHeaderFrom
			);
			std::string sio_FN_GetHttpClientRequestHeaderFrom();
		}sio_C_HttpClientRequestHeaderFrom;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpClientRequestHeaderHost
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpClientRequestHeaderHost {
			NONE = 0x00000000,
		}sio_E_HttpClientRequestHeaderHost;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpClientRequestHeaderHost
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpClientRequestHeaderHost : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpClientRequestHeaderHostResult;
			std::stringstream sio_SS_HttpClientRequestHeaderHost;
		public:
			sio_C_HttpClientRequestHeaderHost() = delete;
			sio_C_HttpClientRequestHeaderHost(
				const char* sio_V_HttpClientRequestHeaderHostName,
				uint16_t sio_V_HttpClientRequestHeaderHostPort,
				sio_E_HttpClientRequestHeaderHost* sio_PE_HttpClientRequestHeaderHost
			);
			std::string sio_FN_GetHttpClientRequestHeaderHost();
		}sio_C_HttpClientRequestHeaderHost;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpClientRequestHeaderIfMatch
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpClientRequestHeaderIfMatch {
			NONE = 0x00000000,
		}sio_E_HttpClientRequestHeaderIfMatch;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpClientRequestHeaderIfMatch
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpClientRequestHeaderIfMatch : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpClientRequestHeaderIfMatchResult;
			std::stringstream sio_SS_HttpClientRequestHeaderIfMatch;
		public:
			sio_C_HttpClientRequestHeaderIfMatch() = delete;
			sio_C_HttpClientRequestHeaderIfMatch(
				const char* sio_V_HttpClientRequestHeaderIfMatchEntityTag,
				sio_E_HttpClientRequestHeaderIfMatch* sio_PE_HttpClientRequestHeaderIfMatch
			);
			sio_C_HttpClientRequestHeaderIfMatch& Add(
				const char* sio_V_HttpClientRequestHeaderIfMatchEntityTag,
				sio_E_HttpClientRequestHeaderIfMatch* sio_PE_HttpClientRequestHeaderIfMatch
			);
			std::string sio_FN_GetHttpClientRequestHeaderIfMatch();
		}sio_C_HttpClientRequestHeaderIfMatch;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpClientRequestHeaderIfModifiedSince
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpClientRequestHeaderIfModifiedSince {
			NONE = 0x00000000,
			RFC822 = 0x00000001,
			RFC850 = 0x00000002,
			ANSI = 0x00000004,
		}sio_E_HttpClientRequestHeaderIfModifiedSince;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpClientRequestHeaderIfModifiedSince
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpClientRequestHeaderIfModifiedSince : sio_S_HttpControlers {
		private:
			time_t now;
			const char* sio_V_name;
			std::string sio_V_HttpClientRequestHeaderIfModifiedSinceResult;
			std::stringstream sio_SS_HttpClientRequestHeaderIfModifiedSince;
		public:
			sio_C_HttpClientRequestHeaderIfModifiedSince() = delete;
			sio_C_HttpClientRequestHeaderIfModifiedSince(sio_E_HttpClientRequestHeaderIfModifiedSince* sio_PE_HttpClientRequestHeaderIfModifiedSince);
			std::string sio_FN_GetHttpClientRequestHeaderIfModifiedSince();
		}sio_C_HttpClientRequestHeaderIfModifiedSince;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpClientRequestHeaderIfNotMatch
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpClientRequestHeaderIfNotMatch {
			NONE = 0x00000000,
		}sio_E_HttpClientRequestHeaderIfNotMatch;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpClientRequestHeaderIfNotMatch
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpClientRequestHeaderIfNotMatch : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpClientRequestHeaderIfNotMatchResult;
			std::stringstream sio_SS_HttpClientRequestHeaderIfNotMatch;
		public:
			sio_C_HttpClientRequestHeaderIfNotMatch() = delete;
			sio_C_HttpClientRequestHeaderIfNotMatch(
				const char* sio_V_HttpClientRequestHeaderIfNotMatchEntityTag,
				sio_E_HttpClientRequestHeaderIfNotMatch* sio_PE_HttpClientRequestHeaderIfNotMatch);
			std::string sio_FN_GetHttpClientRequestHeaderIfNotMatch();
		}sio_C_HttpClientRequestHeaderIfNotMatch;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpClientRequestHeaderIfRange
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpClientRequestHeaderIfRange {
			NONE = 0x00000000,
			DATE = 0x00000001,
			ENTITY_TAG = 0x00000002,
		}sio_E_HttpClientRequestHeaderIfRange;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpClientRequestHeaderIfRangeDateType
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpClientRequestHeaderIfRangeDateType {
			NONE = 0x00000000,
			RFC822 = 0x00000001,
			RFC850 = 0x00000002,
			ANSI = 0x00000004,
		}sio_E_HttpClientRequestHeaderIfRangeDateType;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpClientRequestHeaderIfRange
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpClientRequestHeaderIfRange : sio_S_HttpControlers {
		private:
			time_t now;
			const char* sio_V_name;
			std::string sio_V_HttpClientRequestHeaderIfRangeResult;
			std::stringstream sio_SS_HttpClientRequestHeaderIfRange;
		public:
			sio_C_HttpClientRequestHeaderIfRange() = delete;
			sio_C_HttpClientRequestHeaderIfRange(
				const char* sio_V_HttpClientRequestHeaderIfRangeEntityTag,
				sio_E_HttpClientRequestHeaderIfRange* sio_PE_HttpClientRequestHeaderIfRange,
				sio_E_HttpClientRequestHeaderIfRangeDateType* sio_PE_HttpClientRequestHeaderIfRangeDateType
			);
			std::string sio_FN_GetHttpClientRequestHeaderIfRange();
		}sio_C_HttpClientRequestHeaderIfRange;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpClientRequestHeaderIfUnmodifiedSince
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpClientRequestHeaderIfUnmodifiedSince {
			NONE = 0x00000000,
			RFC822 = 0x00000001,
			RFC850 = 0x00000002,
			ANSI = 0x00000004,
		}sio_E_HttpClientRequestHeaderIfUnmodifiedSince;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpClientRequestHeaderIfUnmodifiedSince
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpClientRequestHeaderIfUnmodifiedSince : sio_S_HttpControlers {
		private:
			time_t now;
			const char* sio_V_name;
			std::string sio_V_HttpClientRequestHeaderIfUnmodifiedSinceResult;
			std::stringstream sio_SS_HttpClientRequestHeaderIfUnmodifiedSince;
		public:
			sio_C_HttpClientRequestHeaderIfUnmodifiedSince() = delete;
			sio_C_HttpClientRequestHeaderIfUnmodifiedSince(sio_E_HttpClientRequestHeaderIfUnmodifiedSince* sio_PE_HttpClientRequestHeaderIfUnmodifiedSince);
			std::string sio_FN_GetHttpClientRequestHeaderIfUnmodifiedSince();
		}sio_C_HttpClientRequestHeaderIfUnmodifiedSince;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpClientRequestHeaderMaxForwards
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpClientRequestHeaderMaxForwards {
			NONE = 0x00000000,
		}sio_E_HttpClientRequestHeaderMaxForwards;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpClientRequestHeaderMaxForwards
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpClientRequestHeaderMaxForwards : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpClientRequestHeaderMaxForwardsResult;
			std::stringstream sio_SS_HttpClientRequestHeaderMaxForwards;
		public:
			sio_C_HttpClientRequestHeaderMaxForwards() = delete;
			sio_C_HttpClientRequestHeaderMaxForwards(
				uint16_t sio_V_HttpClientRequestHeaderMaxForwardsNumber,
				sio_E_HttpClientRequestHeaderMaxForwards* sio_PE_HttpClientRequestHeaderMaxForwards);
			std::string sio_FN_GetHttpClientRequestHeaderMaxForwards();
		}sio_C_HttpClientRequestHeaderMaxForwards;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpClientRequestHeaderProxyAuthorization
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpClientRequestHeaderProxyAuthorization {
			NONE = 0x00000000,
		}sio_E_HttpClientRequestHeaderProxyAuthorization;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpClientRequestHeaderProxyAuthorization
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpClientRequestHeaderProxyAuthorization : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpClientRequestHeaderProxyAuthorizationResult;
			std::stringstream sio_SS_HttpClientRequestHeaderProxyAuthorization;
		public:
			sio_C_HttpClientRequestHeaderProxyAuthorization() = delete;
			sio_C_HttpClientRequestHeaderProxyAuthorization(
				const char* sio_V_HttpClientRequestHeaderProxyAuthorization,
				sio_E_HttpClientRequestHeaderProxyAuthorization* sio_PE_HttpClientRequestHeaderProxyAuthorization
			);
			std::string sio_FN_GetHttpClientRequestHeaderProxyAuthorization();
		}sio_C_HttpClientRequestHeaderProxyAuthorization;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpClientRequestHeaderRange
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpClientRequestHeaderRange {
			NONE = 0x00000000,
		}sio_E_HttpClientRequestHeaderRange;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpClientRequestHeaderRange
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpClientRequestHeaderRange : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpClientRequestHeaderRangeResult;
			std::stringstream sio_SS_HttpClientRequestHeaderRange;
		public:
			sio_C_HttpClientRequestHeaderRange() = delete;
			sio_C_HttpClientRequestHeaderRange(
				uint32_t sio_V_HttpClientRequestHeaderRangeFirstBytePos,
				uint32_t sio_V_HttpClientRequestHeaderRangeLastBytePos,
				sio_E_HttpClientRequestHeaderRange* sio_PE_HttpClientRequestHeaderRange);
			std::string sio_FN_GetHttpClientRequestHeaderRange();
		}sio_C_HttpClientRequestHeaderRange;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpClientRequestHeaderRefere
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpClientRequestHeaderRefere {
			NONE = 0x00000000,
			ABSOLUTE_URL = 0x00000001,
			RELATIVE_URL = 0x00000002,
		}sio_E_HttpClientRequestHeaderRefere;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpClientRequestHeaderRefere
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpClientRequestHeaderRefere : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpClientRequestHeaderRefereResult;
			std::stringstream sio_SS_HttpClientRequestHeaderRefere;
		public:
			sio_C_HttpClientRequestHeaderRefere() = delete;
			sio_C_HttpClientRequestHeaderRefere(
				const char* sio_V_HttpClientRequestHeaderRefereUrl,
				sio_E_HttpClientRequestHeaderRefere* sio_PE_HttpClientRequestHeaderRefere
			);
			std::string sio_FN_GetHttpClientRequestHeaderRefere();
		}sio_C_HttpClientRequestHeaderRefere;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpClientRequestHeaderTe
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpClientRequestHeaderTe {
			NONE = 0x00000000,
			DEFLATE = 0x00000001,
			TRAILERS = 0x00000002,
		}sio_E_HttpClientRequestHeaderTe;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpClientRequestHeaderTe
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpClientRequestHeaderTe : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpClientRequestHeaderTeResult;
			std::stringstream sio_SS_HttpClientRequestHeaderTe;
		public:
			sio_C_HttpClientRequestHeaderTe() = delete;
			sio_C_HttpClientRequestHeaderTe(
				float sio_V_HttpClientRequestHeaderTeQvalue,
				const char* sio_V_HttpClientRequestHeaderTeCoding,
				sio_E_HttpClientRequestHeaderTe* sio_PE_HttpClientRequestHeaderTe
			);
			std::string sio_FN_GetHttpClientRequestHeaderTe();
		}sio_C_HttpClientRequestHeaderTe;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpClientRequestHeaderUserAgent
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpClientRequestHeaderUserAgent {
			NONE = 0x00000000,
		}sio_E_HttpClientRequestHeaderUserAgent;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpClientRequestHeaderUserAgent
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpClientRequestHeaderUserAgent : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpClientRequestHeaderUserAgentResult;
			std::stringstream sio_SS_HttpClientRequestHeaderUserAgent;
		public:
			sio_C_HttpClientRequestHeaderUserAgent() = delete;
			sio_C_HttpClientRequestHeaderUserAgent(
				const char* sio_V_HttpClientRequestHeaderUserAgentProduct,
				const char* sio_V_HttpClientRequestHeaderUserAgentComment,
				sio_E_HttpClientRequestHeaderUserAgent* sio_PE_HttpClientRequestHeaderUserAgent
			);
			std::string sio_FN_GetHttpClientRequestHeaderUserAgent();
		}sio_C_HttpClientRequestHeaderUserAgent;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpClientRequestHeader
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpClientRequestHeader {
			NONE = 0x00000000,
			ACCEPT = 0x00000001,
			ACCEPT_CHARSET = 0x00000002,
			ACCEPT_ENCODING = 0x00000004,
			ACCEPT_LANGUAGE = 0x00000008,
			AUTHORIZATION = 0x00000010,
			COOKIE = 0x00000020,
			EXPECT = 0x00000040,
			FROM = 0x00000080,
			HOST = 0x00000100,
			IF_MATCH = 0x00000200,
			IF_MODIFIED_SINCE = 0x00000400,
			IF_NOT_MATCH = 0x00000800,
			IF_RANGE = 0x00000800,
			IF_UNMODIFIED_SINCE = 0x00000800,
			MAX_FORWARDS = 0x00001000,
			PROXY_AUTHORIZATION = 0x00002000,
			RANGE = 0x00004000,
			REFERE = 0x00008000,
			TE = 0x00010000,
			USER_AGENT = 0x00020000
		}sio_E_HttpClientRequestHeader;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpClientRequestHeader
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpClientRequestHeader : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpClientRequestHeaderResult;
			std::stringstream sio_SS_HttpClientRequestHeader;
		public:
			sio_C_HttpClientRequestHeader() = default;
			void sio_FN_SetHttpClientRequestHeader();
			std::string sio_FN_GetHttpClientRequestHeader(
				sio_E_HttpClientRequestHeader* sio_PE_HttpClientRequestHeader,
				sio_C_HttpClientRequestHeaderAccept* sio_PC_HttpClientRequestHeaderAccept,
				sio_C_HttpClientRequestHeaderAcceptCharset* sio_PC_HttpClientRequestHeaderAcceptCharset,
				sio_C_HttpClientRequestHeaderAcceptEncoding* sio_PC_HttpClientRequestHeaderAcceptEncoding,
				sio_C_HttpClientRequestHeaderAcceptLanguage* sio_PC_HttpClientRequestHeaderAcceptLanguage,
				sio_C_HttpClientRequestHeaderAuthorization* sio_PC_HttpClientRequestHeaderAuthorization,
				sio_C_HttpClientRequestHeaderCookie* sio_PC_HttpClientRequestHeaderCookie,
				sio_C_HttpClientRequestHeaderExpect* sio_PC_HttpClientRequestHeaderExpect,
				sio_C_HttpClientRequestHeaderFrom* sio_PC_HttpClientRequestHeaderFrom,
				sio_C_HttpClientRequestHeaderHost* sio_PC_HttpClientRequestHeaderHost,
				sio_C_HttpClientRequestHeaderIfMatch* sio_PC_HttpClientRequestHeaderIfMatch,
				sio_C_HttpClientRequestHeaderIfModifiedSince* sio_PC_HttpClientRequestHeaderIfModifiedSince,
				sio_C_HttpClientRequestHeaderIfNotMatch* sio_PC_HttpClientRequestHeaderIfNotMatch,
				sio_C_HttpClientRequestHeaderIfRange* sio_PC_HttpClientRequestHeaderIfRange,
				sio_C_HttpClientRequestHeaderIfUnmodifiedSince* sio_PC_HttpClientRequestHeaderIfUnmodifiedSince,
				sio_C_HttpClientRequestHeaderMaxForwards* sio_PC_HttpClientRequestHeaderMaxForwards,
				sio_C_HttpClientRequestHeaderProxyAuthorization* sio_PC_HttpClientRequestHeaderProxyAuthorization,
				sio_C_HttpClientRequestHeaderRange* sio_PC_HttpClientRequestHeaderRange,
				sio_C_HttpClientRequestHeaderRefere* sio_PC_HttpClientRequestHeaderRefere,
				sio_C_HttpClientRequestHeaderTe* sio_PC_HttpClientRequestHeaderTe,
				sio_C_HttpClientRequestHeaderUserAgent* sio_PC_HttpClientRequestHeaderUserAgent
			);
		}sio_C_HttpClientRequestHeader;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpServerResponseHeaderAcceptRanges
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpServerResponseHeaderAcceptRanges {
			NONE = 0x00000000,
			BYTE = 0x00000001,
		}sio_E_HttpServerResponseHeaderAcceptRanges;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpServerResponseHeaderAcceptRanges
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpServerResponseHeaderAcceptRanges : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpServerResponseHeaderAcceptRangesResult;
			std::stringstream sio_SS_HttpServerResponseHeaderAcceptRanges;
		public:
			sio_C_HttpServerResponseHeaderAcceptRanges() = delete;
			sio_C_HttpServerResponseHeaderAcceptRanges(
				sio_E_HttpServerResponseHeaderAcceptRanges* sio_PE_HttpServerResponseHeaderAcceptRanges
			);
			std::string sio_FN_GetHttpServerResponseHeaderAcceptRanges();
		}sio_C_HttpServerResponseHeaderAcceptRanges;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpServerResponseHeaderAge
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpServerResponseHeaderAge {
			NONE = 0x00000000,
		}sio_E_HttpServerResponseHeaderAge;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpServerResponseHeaderAge
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpServerResponseHeaderAge : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpServerResponseHeaderAgeResult;
			std::stringstream sio_SS_HttpServerResponseHeaderAge;
		public:
			sio_C_HttpServerResponseHeaderAge() = delete;
			sio_C_HttpServerResponseHeaderAge(
				uint32_t sio_V_HttpServerResponseHeaderAgeDeltaSeconds,
				sio_E_HttpServerResponseHeaderAge* sio_PE_HttpServerResponseHeaderAge
			);
			std::string sio_FN_GetHttpServerResponseHeaderAge();
		}sio_C_HttpServerResponseHeaderAge;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpServerResponseHeaderEtag
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpServerResponseHeaderEtag {
			NONE = 0x00000000,
		}sio_E_HttpServerResponseHeaderEtag;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpServerResponseHeaderEtag
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpServerResponseHeaderEtag : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpServerResponseHeaderEtagResult;
			std::stringstream sio_SS_HttpServerResponseHeaderEtag;
		public:
			sio_C_HttpServerResponseHeaderEtag() = delete;
			sio_C_HttpServerResponseHeaderEtag(
				const char* sio_V_HttpServerResponseHeaderEtagEntityTag,
				sio_E_HttpServerResponseHeaderEtag* sio_PE_HttpServerResponseHeaderEtag
			);
			std::string sio_FN_GetHttpServerResponseHeaderEtag();
		}sio_C_HttpServerResponseHeaderEtag;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpServerResponseHeaderLocation
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpServerResponseHeaderLocation {
			NONE = 0x00000000,
		}sio_E_HttpServerResponseHeaderLocation;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpServerResponseHeaderLocation
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpServerResponseHeaderLocation : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpServerResponseHeaderLocationResult;
			std::stringstream sio_SS_HttpServerResponseHeaderLocation;
		public:
			sio_C_HttpServerResponseHeaderLocation() = delete;
			sio_C_HttpServerResponseHeaderLocation(
				const char* sio_V_HttpServerResponseHeaderLocationAbsoluteURL,
				sio_E_HttpServerResponseHeaderLocation* sio_PE_HttpServerResponseHeaderLocation
			);
			std::string sio_FN_GetHttpServerResponseHeaderLocation();
		}sio_C_HttpServerResponseHeaderLocation;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpServerResponseHeaderProxyAuthorization
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpServerResponseHeaderProxyAuthorization {
			NONE = 0x00000000,
		}sio_E_HttpServerResponseHeaderProxyAuthorization;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpServerResponseHeaderProxyAuthorization
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpServerResponseHeaderProxyAuthorization : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpServerResponseHeaderProxyAuthorizationResult;
			std::stringstream sio_SS_HttpServerResponseHeaderProxyAuthorization;
		public:
			sio_C_HttpServerResponseHeaderProxyAuthorization() = delete;
			sio_C_HttpServerResponseHeaderProxyAuthorization(
				const char* sio_V_HttpServerResponseHeaderProxyAuthorizationChallenge,
				sio_E_HttpServerResponseHeaderProxyAuthorization* sio_PE_HttpServerResponseHeaderProxyAuthorization);
			std::string sio_FN_GetHttpServerResponseHeaderProxyAuthorization();
		}sio_C_HttpServerResponseHeaderProxyAuthorization;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpServerResponseHeaderRetryAfter
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpServerResponseHeaderRetryAfter {
			NONE = 0x00000000,
			HTTP_DATE = 0x00000001,
			DELTA_SECONDS = 0x00000002,
		}sio_E_HttpServerResponseHeaderRetryAfter;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpServerResponseHeaderRetryAfterHttpDate
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpServerResponseHeaderRetryAfterHttpDate {
			NONE = 0x00000000,
			RFC822 = 0x00000001,
			RFC850 = 0x00000002,
			ANSI = 0x00000004,
		}sio_E_HttpServerResponseHeaderRetryAfterHttpDate;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpServerResponseHeaderRetryAfter
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpServerResponseHeaderRetryAfter : sio_S_HttpControlers {
		private:
			time_t now;
			const char* sio_V_name;
			std::string sio_V_HttpServerResponseHeaderRetryAfterResult;
			std::stringstream sio_SS_HttpServerResponseHeaderRetryAfter;
		public:
			sio_C_HttpServerResponseHeaderRetryAfter() = delete;
			sio_C_HttpServerResponseHeaderRetryAfter(
				uint32_t sio_V_HttpServerResponseHeaderRetryAfterDeltaSeconds,
				sio_E_HttpServerResponseHeaderRetryAfter* sio_PE_HttpServerResponseHeaderRetryAfter,
				sio_E_HttpServerResponseHeaderRetryAfterHttpDate* sio_PE_HttpServerResponseHeaderRetryAfterHttpDate
			);
			std::string sio_FN_GetHttpServerResponseHeaderRetryAfter();
		}sio_C_HttpServerResponseHeaderRetryAfter;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpServerResponseHeaderServer
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpServerResponseHeaderServer {
			NONE = 0x00000000,
		}sio_E_HttpServerResponseHeaderServer;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpServerResponseHeaderServer
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpServerResponseHeaderServer : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpServerResponseHeaderServerResult;
			std::stringstream sio_SS_HttpServerResponseHeaderServer;
		public:
			sio_C_HttpServerResponseHeaderServer() = delete;
			sio_C_HttpServerResponseHeaderServer(
				const char* sio_V_HttpServerResponseHeaderServerProduct,
				const char* sio_V_HttpServerResponseHeaderServerComment,
				sio_E_HttpServerResponseHeaderServer* sio_PE_HttpServerResponseHeaderServer
			);
			std::string sio_FN_GetHttpServerResponseHeaderServer();
		}sio_C_HttpServerResponseHeaderServer;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpServerResponseHeaderSetCookie
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpServerResponseHeaderSetCookie {
			NONE = 0x00000000,
		}sio_E_HttpServerResponseHeaderSetCookie;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpServerResponseHeaderSetCookieOptions
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpServerResponseHeaderSetCookieOptions {
			NONE = 0x00000000,
			COMMENT = 0x00000001,
			COOKIE_DOMAIN = 0x00000002,
			EXPIRES = 0x00000004,
			PATH = 0x00000008,
			SECURE = 0x00000010,
		}sio_E_HttpServerResponseHeaderSetCookieOptions;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpServerResponseHeaderSetCookie
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpServerResponseHeaderSetCookie : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpServerResponseHeaderSetCookieResult;
			std::stringstream sio_SS_HttpServerResponseHeaderSetCookie;
		public:
			sio_C_HttpServerResponseHeaderSetCookie() = delete;
			sio_C_HttpServerResponseHeaderSetCookie(
				const char* sio_V_HttpServerResponseHeaderSetCookieName,
				const char* sio_V_HttpServerResponseHeaderSetCookieValue,
				bool sio_V_HttpServerResponseHeaderSetCookieOptionsExits,
				const char* sio_V_HttpServerResponseHeaderSetCookieOptionsName,
				const char* sio_V_HttpServerResponseHeaderSetCookieOptionsvalue,
				sio_E_HttpServerResponseHeaderSetCookie* sio_PE_HttpServerResponseHeaderSetCookie,
				sio_E_HttpServerResponseHeaderSetCookieOptions* sio_pE_HttpServerResponseHeaderSetCookieOptions
			);
			sio_C_HttpServerResponseHeaderSetCookie& Add(
				const char* sio_V_HttpServerResponseHeaderSetCookieName,
				const char* sio_V_HttpServerResponseHeaderSetCookieValue,
				bool sio_V_HttpServerResponseHeaderSetCookieOptionsExits,
				const char* sio_V_HttpServerResponseHeaderSetCookieOptionsName,
				const char* sio_V_HttpServerResponseHeaderSetCookieOptionsvalue,
				sio_E_HttpServerResponseHeaderSetCookie* sio_PE_HttpServerResponseHeaderSetCookie,
				sio_E_HttpServerResponseHeaderSetCookieOptions* sio_pE_HttpServerResponseHeaderSetCookieOptions
			);
			std::string sio_FN_GetHttpServerResponseHeaderSetCookie();
		}sio_C_HttpServerResponseHeaderSetCookie;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpServerResponseHeaderVary
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpServerResponseHeaderVary {
			NONE = 0x00000000,
		}sio_E_HttpServerResponseHeaderVary;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpServerResponseHeaderVary
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpServerResponseHeaderVary : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpServerResponseHeaderVaryResult;
			std::stringstream sio_SS_HttpServerResponseHeaderVary;
		public:
			sio_C_HttpServerResponseHeaderVary() = delete;
			sio_C_HttpServerResponseHeaderVary(
				const char* sio_V_HttpServerResponseHeaderVaryFieldName,
				sio_E_HttpServerResponseHeaderVary* sio_PE_HttpServerResponseHeaderVary
			);
			sio_C_HttpServerResponseHeaderVary& Add(
				const char* sio_V_HttpServerResponseHeaderVaryFieldName,
				sio_E_HttpServerResponseHeaderVary* sio_PE_HttpServerResponseHeaderVary
			);
			std::string sio_FN_GetHttpServerResponseHeaderVary();
		}sio_C_HttpServerResponseHeaderVary;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpServerResponseHeaderWwwAuthentication
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpServerResponseHeaderWwwAuthentication {
			NONE = 0x00000000,
			BASIC = 0x00000001,
		}sio_E_HttpServerResponseHeaderWwwAuthentication;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpServerResponseHeaderWwwAuthentication
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpServerResponseHeaderWwwAuthentication : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpServerResponseHeaderWwwAuthenticationResult;
			std::stringstream sio_SS_HttpServerResponseHeaderWwwAuthentication;
		public:
			sio_C_HttpServerResponseHeaderWwwAuthentication() = delete;
			sio_C_HttpServerResponseHeaderWwwAuthentication(
				const char* sio_V_HttpServerResponseHeaderWwwAuthenticationChallenge,
				sio_E_HttpServerResponseHeaderWwwAuthentication* sio_PE_HttpServerResponseHeaderWwwAuthentication
			);
			sio_C_HttpServerResponseHeaderWwwAuthentication& Add(
				const char* sio_V_HttpServerResponseHeaderWwwAuthenticationChallenge,
				sio_E_HttpServerResponseHeaderWwwAuthentication* sio_PE_HttpServerResponseHeaderWwwAuthentication
			);
			std::string sio_FN_GetHttpServerResponseHeaderWwwAuthentication();
		}sio_C_HttpServerResponseHeaderWwwAuthentication;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpServerResponseHeader
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpServerResponseHeader {
			NONE = 0x00000000,
			ACCEPT_RANGES = 0x00000001,
			AGE = 0x00000002,
			ETAG = 0x00000004,
			LOCATION = 0x00000008,
			PROXY_AUTHORIZATION = 0x00000010,
			RETRY_AFTER = 0x00000020,
			SERVER = 0x00000040,
			SET_COOKIE = 0x00000080,
			VARY = 0x00000100,
			WWW_AUTHENTICATION = 0x00000200,
		}sio_E_HttpServerResponseHeader;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpServerResponseHeader
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpServerResponseHeader : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpServerResponseHeaderResult;
			std::stringstream sio_SS_HttpServerResponseHeader;
		public:
			sio_C_HttpServerResponseHeader() = delete;
			sio_C_HttpServerResponseHeader(
				sio_E_HttpServerResponseHeader* sio_PE_HttpServerResponseHeader,
				sio_C_HttpServerResponseHeaderAcceptRanges* sio_PC_HttpServerResponseHeaderAcceptRanges,
				sio_C_HttpServerResponseHeaderAge* sio_PC_HttpServerResponseHeaderAge,
				sio_C_HttpServerResponseHeaderEtag* sio_PC_HttpServerResponseHeaderEtag,
				sio_C_HttpServerResponseHeaderLocation* sio_PC_HttpServerResponseHeaderLocation,
				sio_C_HttpServerResponseHeaderProxyAuthorization* sio_PC_HttpServerResponseHeaderProxyAuthorization,
				sio_C_HttpServerResponseHeaderRetryAfter* sio_PC_HttpServerResponseHeaderRetryAfter,
				sio_C_HttpServerResponseHeaderServer* sio_PC_HttpServerResponseHeaderServer,
				sio_C_HttpServerResponseHeaderSetCookie* sio_PC_HttpServerResponseHeaderSetCookie,
				sio_C_HttpServerResponseHeaderVary* sio_PC_HttpServerResponseHeaderVary,
				sio_C_HttpServerResponseHeaderWwwAuthentication* sio_PC_HttpServerResponseHeaderWwwAuthentication
			);
			std::string sio_FN_GetHttpServerResponseHeader();
		}sio_C_HttpServerResponseHeader;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpEntityHeaderAllow
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpEntityHeaderAllow {
			NONE = 0x00000000,
			GET = 0x00000001,
			HEAD = 0x00000002,
			POST = 0x00000004,
			PUT = 0x00000008,
			DELETE = 0x00000010,
			CONNECT = 0x00000020,
			OPTIONS = 0x00000040,
			TRACE = 0x00000080,
		}sio_E_HttpEntityHeaderAllow;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpEntityHeaderAllow
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpEntityHeaderAllow : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpEntityHeaderAllowResult;
			std::stringstream sio_SS_HttpEntityHeaderAllow;
		public:
			sio_C_HttpEntityHeaderAllow() = delete;
			sio_C_HttpEntityHeaderAllow(sio_E_HttpEntityHeaderAllow* sio_PE_HttpEntityHeaderAllow);
			sio_C_HttpEntityHeaderAllow& Add(sio_E_HttpEntityHeaderAllow* sio_PE_HttpEntityHeaderAllow);
			std::string sio_FN_GetHttpEntityHeaderAllow();
		}sio_C_HttpEntityHeaderAllow;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpEntityHeaderContentEncoding
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpEntityHeaderContentEncoding {
			NONE = 0x00000000,
			COMPRESS = 0x00000001,
			GZIP = 0x00000002,
			IDENTITY = 0x00000004,
			ALL = 0x00000008,
		}sio_E_HttpEntityHeaderContentEncoding;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpEntityHeaderContentEncoding
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpEntityHeaderContentEncoding : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpEntityHeaderContentEncodingResult;
			std::stringstream sio_SS_HttpEntityHeaderContentEncoding;
		public:
			sio_C_HttpEntityHeaderContentEncoding() = delete;
			sio_C_HttpEntityHeaderContentEncoding(sio_E_HttpEntityHeaderContentEncoding* sio_PE_HttpEntityHeaderContentEncoding);
			sio_C_HttpEntityHeaderContentEncoding& Add(sio_E_HttpEntityHeaderContentEncoding* sio_PE_HttpEntityHeaderContentEncoding);
			std::string sio_FN_GetHttpEntityHeaderContentEncoding();
		}sio_C_HttpEntityHeaderContentEncoding;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpEntityHeaderContentLanguage
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpEntityHeaderContentLanguage {
			NONE = 0x00000000,
			EN_US = 0x00000001,
			EN = 0x00000002,
			EN_GB = 0x00000004,
			DA = 0x00000008,
		}sio_E_HttpEntityHeaderContentLanguage;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpEntityHeaderContentLanguage
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpEntityHeaderContentLanguage : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpEntityHeaderContentLanguageResult;
			std::stringstream sio_SS_HttpEntityHeaderContentLanguage;
		public:
			sio_C_HttpEntityHeaderContentLanguage() = delete;
			sio_C_HttpEntityHeaderContentLanguage(sio_E_HttpEntityHeaderContentLanguage* sio_PE_HttpEntityHeaderContentLanguage);
			sio_C_HttpEntityHeaderContentLanguage& Add(sio_E_HttpEntityHeaderContentLanguage* sio_PE_HttpEntityHeaderContentLanguage);
			std::string sio_FN_GetHttpEntityHeaderContentLanguage();
		}sio_C_HttpEntityHeaderContentLanguage;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpEntityHeaderContentLength
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpEntityHeaderContentLength {
			NONE = 0x00000000,
		}sio_E_HttpEntityHeaderContentLength;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpEntityHeaderContentLength
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpEntityHeaderContentLength : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpEntityHeaderContentLengthResult;
			std::stringstream sio_SS_HttpEntityHeaderContentLength;
		public:
			sio_C_HttpEntityHeaderContentLength() = delete;
			sio_C_HttpEntityHeaderContentLength(
				uint32_t sio_V_HttpEntityHeaderContentLengthDigit,
				sio_E_HttpEntityHeaderContentLength* sio_PE_HttpEntityHeaderContentLength
			);
			std::string sio_FN_GetHttpEntityHeaderContentLength();
		}sio_C_HttpEntityHeaderContentLength;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpEntityHeaderContentLocation
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpEntityHeaderContentLocation {
			NONE = 0x00000000,
			ABSOLUTE_URI = 0x00000001,
			RELATIVE_URI = 0x00000002,
		}sio_E_HttpEntityHeaderContentLocation;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpEntityHeaderContentLocation
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpEntityHeaderContentLocation : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpEntityHeaderContentLocationResult;
			std::stringstream sio_SS_HttpEntityHeaderContentLocation;
		public:
			sio_C_HttpEntityHeaderContentLocation() = delete;
			sio_C_HttpEntityHeaderContentLocation(
				const char* sio_V_HttpEntityHeaderContentLocationUrl,
				sio_E_HttpEntityHeaderContentLocation* sio_PE_HttpEntityHeaderContentLocation
			);
			std::string sio_FN_GetHttpEntityHeaderContentLocation();
		}sio_C_HttpEntityHeaderContentLocation;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpEntityHeaderContentMd5
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpEntityHeaderContentMd5 {
			NONE = 0x00000000,
		}sio_E_HttpEntityHeaderContentMd5;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpEntityHeaderContentMd5
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpEntityHeaderContentMd5 : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpEntityHeaderContentMd5Result;
			std::stringstream sio_SS_HttpEntityHeaderContentMd5;
		public:
			sio_C_HttpEntityHeaderContentMd5() = delete;
			sio_C_HttpEntityHeaderContentMd5(sio_E_HttpEntityHeaderContentMd5* sio_PE_HttpEntityHeaderContentMd5);
			std::string sio_FN_GetHttpEntityHeaderContentMd5();
		}sio_C_HttpEntityHeaderContentMd5;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpEntityHeaderContentRange
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpEntityHeaderContentRange {
			NONE = 0x00000000,
		}sio_E_HttpEntityHeaderContentRange;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpEntityHeaderContentRange
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpEntityHeaderContentRange : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpEntityHeaderContentRangeResult;
			std::stringstream sio_SS_HttpEntityHeaderContentRange;
		public:
			sio_C_HttpEntityHeaderContentRange() = delete;
			sio_C_HttpEntityHeaderContentRange(
				const char* sio_V_HttpEntityHeaderContentRangeFirstBytePos,
				const char* sio_V_HttpEntityHeaderContentRangeLastBytePos,
				sio_E_HttpEntityHeaderContentRange* sio_PE_HttpEntityHeaderContentRange
			);
			std::string sio_FN_GetHttpEntityHeaderContentRange();
		}sio_C_HttpEntityHeaderContentRange;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpEntityHeaderContentType
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpEntityHeaderContentType {
			NONE = 0x00000000,
			TEXT_PLAIN = 0x00000001,
			TEXT_HTML = 0x00000002,
			TEXT_XDVI = 0x00000004,
			TEXT_XC = 0x00000008,
		}sio_E_HttpEntityHeaderContentType;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpEntityHeaderContentType
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpEntityHeaderContentType : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpEntityHeaderContentTypeResult;
			std::stringstream sio_SS_HttpEntityHeaderContentType;
		public:
			sio_C_HttpEntityHeaderContentType() = delete;
			sio_C_HttpEntityHeaderContentType(
				const char* sio_V_HttpEntityHeaderContentType,
				const char* sio_V_HttpEntityHeader_ContentSubType,
				const char* sio_V_HttpEntityHeaderContentTypeOptions,
				sio_E_HttpEntityHeaderContentType* sio_PE_HttpEntityHeaderContentType
			);
			std::string sio_FN_GetHttpEntityHeaderContentType();
		}sio_C_HttpEntityHeaderContentType;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpEntityHeaderExpires
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpEntityHeaderExpires {
			NONE = 0x00000000,
			RFC822 = 0x00000001,
			RFC850 = 0x00000002,
			ANSI = 0x00000004,
		}sio_E_HttpEntityHeaderExpires;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpEntityHeaderExpires
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpEntityHeaderExpires : sio_S_HttpControlers {
		private:
			time_t now;
			const char* sio_V_name;
			std::string sio_V_HttpEntityHeaderExpiresResult;
			std::stringstream sio_SS_HttpEntityHeaderExpires;
		public:
			sio_C_HttpEntityHeaderExpires() = delete;
			sio_C_HttpEntityHeaderExpires(sio_E_HttpEntityHeaderExpires* sio_PE_HttpEntityHeaderExpires);
			std::string sio_FN_GetHttpEntityHeaderExpires();
		}sio_C_HttpEntityHeaderExpires;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpEntityHeaderLastModified
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpEntityHeaderLastModified {
			NONE = 0x00000000,
			RFC822 = 0x00000001,
			RFC850 = 0x00000002,
			ANSI = 0x00000004,
		}sio_E_HttpEntityHeaderLastModified;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpEntityHeaderLastModified
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpEntityHeaderLastModified : sio_S_HttpControlers {
		private:
			time_t now;
			const char* sio_V_name;
			std::string sio_V_HttpEntityHeaderLastModifiedResult;
			std::stringstream sio_SS_HttpEntityHeaderLastModified;
		public:
			sio_C_HttpEntityHeaderLastModified() = delete;
			sio_C_HttpEntityHeaderLastModified(sio_E_HttpEntityHeaderLastModified* sio_PE_HttpEntityHeaderLastModified);
			std::string sio_FN_GetHttpEntityHeaderLastModified();
		}sio_C_HttpEntityHeaderLastModified;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpEntityHeader
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpEntityHeader {
			NONE = 0x00000000,
			ALLOW = 0x00000001,
			CONTENT_ENCODING = 0x00000002,
			CONTENT_LANGUAGE = 0x00000004,
			CONTENT_LENGTH = 0x00000008,
			CONTENT_LOCATION = 0x00000010,
			CONTENT_MD5 = 0x00000020,
			CONTENT_RANGE = 0x00000020,
			CONTENT_TYPE = 0x00000040,
			EXPIRES = 0x00000080,
			LAST_MODIFIED = 0x00000100
		}sio_E_HttpEntityHeader;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpEntityHeader
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpEntityHeader : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpEntityHeaderResult;
			std::stringstream sio_SS_HttpEntityHeader;
		public:
			sio_C_HttpEntityHeader() = delete;
			sio_C_HttpEntityHeader(
				sio_E_HttpEntityHeader* sio_PE_HttpEntityHeader,
				sio_C_HttpEntityHeaderAllow* sio_PC_HttpEntityHeaderAllow,
				sio_C_HttpEntityHeaderContentEncoding* sio_PC_HttpEntityHeaderContentEncoding,
				sio_C_HttpEntityHeaderContentLanguage* sio_PC_HttpEntityHeaderContentLanguage,
				sio_C_HttpEntityHeaderContentLength* sio_PC_HttpEntityHeaderContentLength,
				sio_C_HttpEntityHeaderContentLocation* sio_PC_HttpEntityHeaderContentLocation,
				sio_C_HttpEntityHeaderContentMd5* sio_PC_HttpEntityHeaderContentMd5,
				sio_C_HttpEntityHeaderContentRange* sio_PC_HttpEntityHeaderContentRange,
				sio_C_HttpEntityHeaderContentType* sio_PC_HttpEntityHeaderContentType,
				sio_C_HttpEntityHeaderExpires* sio_PC_HttpEntityHeaderExpires,
				sio_C_HttpEntityHeaderLastModified* sio_PC_HttpEntityHeaderLastModified
			);
			std::string sio_FN_GetHttpEntityHeader();
		}sio_C_HttpEntityHeader;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_E_HttpHeaderFields
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpHeaderFields {
			NONE = 0x00000000,
			GENERAL_HEADER = 0x00000001,
			CLIENT_REQUEST_HEADER = 0x00000002,
			SERVER_RESPONSE_HEADER = 0x00000004,
			ENTITY_HEADER = 0x00000008
		}sio_E_HttpHeaderFields;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpHeaderFields
		// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol HEADER FIELDS
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef class sio_C_HttpHeaderFields : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			std::string sio_V_HttpHeaderFieldsResult;
			std::stringstream sio_SS_HttpHeaderFields;
		public:
			sio_C_HttpHeaderFields() = delete;
			std::string sio_FN_GetHttpHeaderFields(
				sio_E_HttpHeaderFields* sio_PE_HttpHeaderFields,
				sio_C_HttpGeneralHeader* sio_PC_HttpGeneralHeader,
				sio_C_HttpClientRequestHeader* sio_PC_HttpClientRequestHeader,
				sio_C_HttpServerResponseHeader* sio_PC_HttpServerResponseHeader,
				sio_C_HttpEntityHeader* sio_PC_HttpEntityHeader
			);
		}sio_C_HttpHeaderFields;

		/*
		typedef void(sio_API_PTR* sio_PFN_WriteInfo)(sio_S_Info* sio_PS_Info);

		sio_API_ATTR void sio_API_CALL sio_FN_WriteInfo(
			sio_S_Info* sio_PS_Info
		);

		typedef sio_Result(sio_API_PTR* sio_PFN_DeleteInfo)(sio_S_Info* sio_PS_Info, sio_S_Company* sio_PS_Company, sio_S_Management* sio_PS_Managemnet);

		sio_API_ATTR sio_Result sio_API_CALL sio_FN_DeleteInfo(
			sio_S_Info* sio_PS_Info,
			sio_S_Company* sio_PS_Company,
			sio_S_Management* sio_PS_Managemnet
		);
		*/
	} //namespace httpHeaderFields
}//namespace sio

#endif // !SIO_HTTP_HEADER_FIELDS_H_
