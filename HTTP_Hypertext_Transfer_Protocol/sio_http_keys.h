/*
**copyright (C) 2020 "SHERIFI" Shkelqim Sherifi <sherifi_co@yahoo.com>.
**Boost Software License - Version 1.0 - December 21th, 2019
**
** Licensed under the SHERIFI Inc Private License, Version 1.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.sherifiIO.org/licenses/LICENSE-1.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
**The copyright notices in the Software and this entire statement, including
**the above license grant, this restriction and the following disclaimer,
**must be included in all copies of the Software, in whole or in part, and
**all derivative works of the Software, unless such copies or derivative
**works are solely in the form of machine-executable object code generated by
**a source language processor.
**
**THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
**IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
**FITNESS FOR PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
**AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
**LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
**OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
**SOFTWARE.
**
** This header is generated from the SHERIFI HTTPHypertextTransferProtocol XML API Registry.
**
*/

////////////////////////////////////////////////////////////////////////////////
//        NAME: sio_http_keys.h
// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol 
//   ARGUMENTS: N/A
// USES GLOBAL: N/A
// MODIFIES GL: N/A
//     RETURNS: N/A
//      AUTHOR: SHERIFI
// AUTHOR/DATE: GMT Saturday, July 12, 2020
////////////////////////////////////////////////////////////////////////////////
#ifndef SIO_HTTP_KEYS_H_
#define SIO_HTTP_KEYS_H_ 1

#include <string>
#include <vector>
#include <algorithm>

#define sio_MAX_HTTP_KEYS_CHAR								64
#define sio_MAX_HTTP_KEYS_INFO_CHAR							sio_MAX_HTTP_KEYS_CHAR

namespace sio {
	namespace keys {
		const char* const Null = "\xee\x80\x80";
		const char* const Cancel = "\xee\x80\x81";
		const char* const Help = "\xee\x80\x82";
		const char* const Backspace = "\xee\x80\x83";
		const char* const Tab = "\xee\x80\x84";
		const char* const Clear = "\xee\x80\x85";
		const char* const Return = "\xee\x80\x86";
		const char* const Enter = "\xee\x80\x87";
		const char* const Shift = "\xee\x80\x88";
		const char* const Control = "\xee\x80\x89";
		const char* const Alt = "\xee\x80\x8a";
		const char* const Pause = "\xee\x80\x8b";
		const char* const Escape = "\xee\x80\x8c";
		const char* const Space = "\xee\x80\x8d";
		const char* const PageUp = "\xee\x80\x8e";
		const char* const PageDown = "\xee\x80\x8f";
		const char* const End = "\xee\x80\x90";
		const char* const Home = "\xee\x80\x91";
		const char* const Left = "\xee\x80\x92";
		const char* const Up = "\xee\x80\x93";
		const char* const Right = "\xee\x80\x94";
		const char* const Down = "\xee\x80\x95";
		const char* const Insert = "\xee\x80\x96";
		const char* const Delete = "\xee\x80\x97";
		const char* const Semicolon = "\xee\x80\x98";
		const char* const Equals = "\xee\x80\x99";
		const char* const Numpad0 = "\xee\x80\x9a";
		const char* const Numpad1 = "\xee\x80\x9b";
		const char* const Numpad2 = "\xee\x80\x9c";
		const char* const Numpad3 = "\xee\x80\x9d";
		const char* const Numpad4 = "\xee\x80\x9e";
		const char* const Numpad5 = "\xee\x80\x9f";
		const char* const Numpad6 = "\xee\x80\xa0";
		const char* const Numpad7 = "\xee\x80\xa1";
		const char* const Numpad8 = "\xee\x80\xa2";
		const char* const Numpad9 = "\xee\x80\xa3";
		const char* const Multiply = "\xee\x80\xa4";
		const char* const Add = "\xee\x80\xa5";
		const char* const Separator = "\xee\x80\xa6";
		const char* const Subtract = "\xee\x80\xa7";
		const char* const Decimal = "\xee\x80\xa8";
		const char* const Divide = "\xee\x80\xa9";
		const char* const F1 = "\xee\x80\xb1";
		const char* const F2 = "\xee\x80\xb2";
		const char* const F3 = "\xee\x80\xb3";
		const char* const F4 = "\xee\x80\xb4";
		const char* const F5 = "\xee\x80\xb5";
		const char* const F6 = "\xee\x80\xb6";
		const char* const F7 = "\xee\x80\xb7";
		const char* const F8 = "\xee\x80\xb8";
		const char* const F9 = "\xee\x80\xb9";
		const char* const F10 = "\xee\x80\xba";
		const char* const F11 = "\xee\x80\xbb";
		const char* const F12 = "\xee\x80\xbc";
		const char* const Command = "\xee\x80\xbd";
		const char* const Meta = Command;

		typedef void(sio_API_PTR* sio_PFN_EncodeHtmlUrl)(std::string url);
		typedef void(sio_API_PTR* sio_PFN_DecodeHtmlUrl)(std::string url);

		//Reserved characters and there %hex encoding
		//!	#	$	%	&	'	(	)	*	+	,	/	:	;	=	?	@	[	]
		//%21	%23	%24	%25	%26	%27	%28	%29	%2A	%2B	%2C	%2F	%3A	%3B	%3D	%3F	%40	%5B	%5D
		sio_API_ATTR std::string sio_API_CALL sio_PFN_EncodeHtmlUrl(std::string url) {
			std::string encodedUrl = "";
			char c;
			int ic;
			const char* chars = url.c_str();
			char bufHex[10];
			int len = strlen(chars);

			for (int i = 0; i < len; i++) {
				c = chars[i];
				ic = c;
				// uncomment this if you want to encode spaces with +
				/*if (c==' ') encodedUrl += '+';
				else */if (isalnum(c) || c == '-' || c == '_' || c == '.' || c == '~') encodedUrl += c;
				else {
					sprintf(bufHex, "%X", c);
					if (ic < 16)
						encodedUrl += "%0";
					else
						encodedUrl += "%";
					encodedUrl += bufHex;
				}
			}
			return encodedUrl;
		};

		sio_API_ATTR std::string sio_API_CALL sio_PFN_DecodeHtmlUrl(std::string url) {
			std::string decodedUrl;
			char ch;
			int i, ii, len = url.length();

			for (i = 0; i < len; i++) {
				if (url[i] != '%') {
					if (url[i] == '+')
						decodedUrl += ' ';
					else
						decodedUrl += url[i];
				}
				else {
					sscanf(url.substr(i + 1, 2).c_str(), "%x", &ii);
					ch = static_cast<char>(ii);
					decodedUrl += ch;
					i = i + 2;
				}
			}
			return decodedUrl;
		};

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_S_HTTP_KEYS
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, July 12, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpKeys {
			NONE = 0X00000000,
		}sio_E_HttpKeys;

		typedef struct sio_S_HttpControlers {
			void* sio_P_start;
			void* sio_P_privious;
			void* sio_P_current;
			void* sio_P_next;
			void* sio_P_end;
			uint8_t sio_V_count;
			char** sio_PP_list[sio_MAX_HTTP_KEYS_INFO_CHAR];
		}sio_S_HttpControlers;

		namespace detail {
			class sio_C_Keyboard;
		} // namespace detail

		class sio_C_Shortcut // copyable
		{
		public:
			sio_C_Shortcut& operator << (const std::string& key) {
				keys_.push_back(key);
				return *this;
			}

			sio_C_Shortcut& operator << (const char* key) {
				keys_.push_back(key);
				return *this;
			}

		private:
			friend class detail::sio_C_Keyboard;
			std::vector<std::string> keys_;
		};

	}// namespace keys 
} // namespace sio


/*
typedef void(sio_API_PTR* sio_PFN_WriteInfo)(sio_S_Info* sio_PS_Info);

sio_API_ATTR void sio_API_CALL sio_FN_WriteInfo(
	sio_S_Info* sio_PS_Info
);

typedef sio_Result(sio_API_PTR* sio_PFN_DeleteInfo)(sio_S_Info* sio_PS_Info, sio_S_Company* sio_PS_Company, sio_S_Management* sio_PS_Managemnet);

sio_API_ATTR sio_Result sio_API_CALL sio_FN_DeleteInfo(
	sio_S_Info* sio_PS_Info,
	sio_S_Company* sio_PS_Company,
	sio_S_Management* sio_PS_Managemnet
);
*/

#endif // !SIO_HTTP_KEYS_H_
