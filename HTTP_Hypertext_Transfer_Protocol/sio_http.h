/*
**copyright (C) 2020 "SHERIFI" Shkelqim Sherifi <sherifi_co@yahoo.com>.
**Boost Software License - Version 1.0 - October 03th, 2020
**
** Licensed under the SHERIFI Inc Private License, Version 1.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.sherifiIO.org/licenses/LICENSE-1.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
**The copyright notices in the Software and this entire statement, including
**the above license grant, this restriction and the following disclaimer,
**must be included in all copies of the Software, in whole or in part, and
**all derivative works of the Software, unless such copies or derivative
**works are solely in the form of machine-executable object code generated by
**a source language processor.
**
**THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
**IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
**FITNESS FOR PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
**AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
**LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
**OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
**SOFTWARE.
**
** This header is generated from the SHERIFI HTTPHypertextTransferProtocol XML API Registry.
**
*/

////////////////////////////////////////////////////////////////////////////////
//        NAME: sio_http.h
// DESCRIPTION: This is the root of HTTPHypertextTransferProtocol 
//   ARGUMENTS: N/A
// USES GLOBAL: N/A
// MODIFIES GL: N/A
//     RETURNS: N/A
//      AUTHOR: SHERIFI
// AUTHOR/DATE: GMT Saturday, October 03,2020
////////////////////////////////////////////////////////////////////////////////
#ifndef SIO_HTTP_H_
#define SIO_HTTP_H_ 1

#include "sio_http_platform.h"
#include "sio_http_keys.h"

#define sio_MAX_HTTP_CHAR								64
#define sio_MAX_HTTP_INFO_CHAR							sio_MAX_HTTP_CHAR

// Vulkan 1.0 version number
#define SIO_API_VERSION_1_0 VK_MAKE_VERSION(1, 0, 0)

#define SIO_VERSION_MAJOR(version) ((uint32_t)(version) >> 22)
#define SIO_VERSION_MINOR(version) (((uint32_t)(version) >> 12) & 0x3ff)
#define SIO_VERSION_PATCH(version) ((uint32_t)(version) & 0xfff)
// Version of this file
#define SIO_HEADER_VERSION 1

#define SIO_NULL_HANDLE 0

#define SIO_DEFINE_HANDLE(object) typedef struct object##_T* object;

SIO_DEFINE_HANDLE(sio_PS_Parameters)
SIO_DEFINE_HANDLE(sio_PS_Messages)
SIO_DEFINE_HANDLE(sio_PS_Requests)
SIO_DEFINE_HANDLE(sio_PS_Responses)
SIO_DEFINE_HANDLE(sio_PS_Methods)
SIO_DEFINE_HANDLE(sio_PS_StatusCodes)
SIO_DEFINE_HANDLE(sio_PS_HeaderFields)
SIO_DEFINE_HANDLE(sio_PS_Caching)
SIO_DEFINE_HANDLE(sio_PS_UrlEncoding)
SIO_DEFINE_HANDLE(sio_PS_Security)
SIO_DEFINE_HANDLE(sio_PS_MessageExamples)
SIO_DEFINE_HANDLE(sio_PS_Resources)

namespace log_level {
	const char* const Off = "OFF";
	const char* const Severe = "SEVERE";
	const char* const Warning = "WARNING";
	const char* const Info = "INFO";
	const char* const Config = "CONFIG";
	const char* const Fine = "FINE";
	const char* const Finer = "FINER";
	const char* const Finest = "FINEST";
	const char* const All = "ALL";
} // namespace log_level

namespace log_level {
	const char* const Trace = "TRACE";
	const char* const Debug = "DEBUG";
	const char* const Info = "INFO";
	const char* const Warning = "WARN";
	const char* const Error = "ERROR";
	const char* const Fatal = "FATAL";
} // namespace log_level

namespace browser {
	const char* const Android = "android";
	const char* const Chrome = "chrome";
	const char* const Firefox = "firefox";
	const char* const HtmlUnit = "htmlunit";
	const char* const InternetExplorer = "internet explorer";
	const char* const IPhone = "iPhone";
	const char* const IPad = "iPad";
	const char* const Mock = "mock";
	const char* const Opera = "opera";
	const char* const Safari = "safari";
	const char* const Phantom = "phantomjs";
} // namespace browser

namespace platform {
	const char* const Any = "ANY";
	const char* const Windows = "WINDOWS";
	const char* const Xp = "XP";
	const char* const Vista = "VISTA";
	const char* const Mac = "MAC";
	const char* const Linux = "LINUX";
	const char* const Unix = "UNIX";
	const char* const Android = "ANDROID";
} // namespace platform

namespace unexpected_alert_behaviour {
	const char* const Accept = "accept";
	const char* const Dismiss = "dismiss";
	const char* const Ignore = "ignore";
} // namespace unexpected_alert_behaviour

namespace proxy_type {
	const char* const Direct = "direct";
	// Manual proxy settings configured, e.g. setting a proxy for HTTP, a proxy for FTP
	const char* const Manual = "manual"; 
	// Proxy autoconfiguration from a URL
	const char* const Pac = "pac";
	// Proxy autodetection, probably with WPAD
	const char* const Autodetect = "autodetect";
	// Use system settings
	const char* const System = "system";
} // namespace proxy_type

#define sio_PROPERTIES_BEGIN(this_class)	typedef this_class This;
#define sio_PROPERTIES_END()

#define sio_PROPERTY_RONLY(name, id, type) \
	type Get##name() const { return GetOptional<type>(id); } \
	bool Has##name() { return Has(id); }

#define sio_PROPERTY(name, id, type) \
	sio_PROPERTY_RONLY(name, id, type) \
	This& Set##name(const type& value) { Set(id, value); return *this; }

typedef enum sio_Result {
	sio_SUCCESS = 0,
	sio_NOT_READY = 1,
	sio_TIMEOUT = 2,
	sio_EVENT_SET = 3,
	sio_EVENT_RESET = 4,
	sio_INCOMPLETE = 5,
	sio_ERROR_OUT_OF_HOST_MEMORY = -1,
	sio_ERROR_OUT_OF_DEVICE_MEMORY = -2,
	sio_ERROR_INITIALIZATION_FAILED = -3,
	sio_ERROR_DEVICE_LOST = -4,
	sio_ERROR_MEMORY_MAP_FAILED = -5,
	sio_ERROR_LAYER_NOT_PRESENT = -6,
	sio_ERROR_EXTENSION_NOT_PRESENT = -7,
	sio_ERROR_FEATURE_NOT_PRESENT = -8,
	sio_ERROR_INCOMPATIBLE_DRIVER = -9,
	sio_ERROR_TOO_MANY_OBJECTS = -10,
	sio_ERROR_FROMAT_NOT_SUPPORTED = -11,
	sio_ERROR_FRAGMENTED_POOL = -12,
	sio_ERROR_SURFACE_LOST_KHR = -1000000000,
	sio_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
	sio_SUBOPTIMAL_KHR = 1000001003,
	sio_ERROR_OUT_OF_DATE_KHR = -1000001004,
	sio_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,
	sio_ERROR_VALIDATION_FAILED_EXT = -1000011001,
	sio_ERROR_INVALID_SHADER_NV = -1000012000,
	sio_Result_BEGIN_RANGE = sio_ERROR_FRAGMENTED_POOL,
	sio_Result_END_RANGE = sio_INCOMPLETE,
	sio_Result_RANGE_SIZE = (sio_INCOMPLETE - sio_ERROR_FRAGMENTED_POOL + 1),
	sio_Result_MAX_ENUM = 0x7FFFFFFF
} sio_Result;


#ifdef sio_USE_PLATFROM_ANDROID_KHR
#include "vulkan_android.h"
#endif

#ifdef sio_USE_PLATFROM_FUCHSIA
#include <zircon/types.h>
#include "vulkan_fuchsia.h"
#endif

#ifdef sio_USE_PLATFROM_IOS_MVK
#include "vulkan_ios.h"
#endif


#ifdef sio_USE_PLATFROM_MACOS_MVK
#include "vulkan_macos.h"
#endif

#ifdef sio_USE_PLATFROM_METAL_EXT
#include "vulkan_metal.h"
#endif

#ifdef sio_USE_PLATFROM_VI_NN
#include "vulkan_vi.h"
#endif


#ifdef sio_USE_PLATFROM_WAYLAND_KHR
#include <wayland-client.h>
#include "vulkan_wayland.h"
#endif


#ifdef sio_USE_PLATFROM_WIN32_KHR
#include <windows.h>
#include "vulkan_win32.h"
#endif


#ifdef sio_USE_PLATFROM_XCB_KHR
#include <xcb/xcb.h>
#include "vulkan_xcb.h"
#endif


#ifdef sio_USE_PLATFROM_XLIB_KHR
#include <X11/Xlib.h>
#include "vulkan_xlib.h"
#endif


#ifdef sio_USE_PLATFROM_DIRECTFB_EXT
#include <directfb.h>
#include "vulkan_directfb.h"
#endif


#ifdef sio_USE_PLATFROM_XLIB_XRANDR_EXT
#include <X11/Xlib.h>
#include <X11/extensions/Xrandr.h>
#include "vulkan_xlib_xrandr.h"
#endif


#ifdef sio_USE_PLATFROM_GGP
#include <ggp_c/vulkan_types.h>
#include "vulkan_ggp.h"
#endif


#ifdef sio_ENABLE_BETA_EXTENSIONS
#include "vulkan_beta.h"
#endif


#endif // !SIO_HTTP_H_
