/*
**copyright (C) 2020 "SHERIFI" Shkelqim Sherifi <sherifi_co@yahoo.com>.
**Boost Software License - Version 1.0 - October 02th, 2020
**
** Licensed under the SHERIFI Inc Private License, Version 1.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.sherifiIO.org/licenses/LICENSE-1.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
**The copyright notices in the Software and this entire statement, including
**the above license grant, this restriction and the following disclaimer,
**must be included in all copies of the Software, in whole or in part, and
**all derivative works of the Software, unless such copies or derivative
**works are solely in the form of machine-executable object code generated by
**a source language processor.
**
**THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
**IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
**FITNESS FOR PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
**AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
**LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
**OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
**SOFTWARE.
**
** This header is generated from the SHERIFI HTTPHypertextTransferProtocol XML API Registry.
**
*/

////////////////////////////////////////////////////////////////////////////////
//        NAME: http_status_code.h
// DESCRIPTION: This is the root of status return code for HTTPHypertextTransferProtocol 
//   ARGUMENTS: N/A
// USES GLOBAL: N/A
// MODIFIES GL: N/A
//     RETURNS: N/A
//      AUTHOR: SHERIFI
// AUTHOR/DATE: GMT Saturday, Octomer 02, 2020
////////////////////////////////////////////////////////////////////////////////
#ifndef SIO_HTTP_STATUS_CODE_H_
#define SIO_HTTP_STATUS_CODE_H_ 1

#include <sstream>
#include <assert.h>

#include "sio_http.h"

namespace sio {
	namespace httpStatusCode {

#define sio_MAX_HTTP_STATUS_CODE_CHAR								64
#define sio_MAX_HTTP_STATUS_CODE_INFO_CHAR							sio_MAX_HTTP_STATUS_CODE_CHAR

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_S_HttpControlers
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, Octomer 02, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef struct sio_S_HttpControlers {
			void* sio_P_start;
			void* sio_P_privious;
			void* sio_P_current;
			void* sio_P_next;
			void* sio_P_end;
			uint8_t sio_V_count;
			char** sio_PP_list[sio_MAX_HTTP_STATUS_CODE_INFO_CHAR];
		}sio_S_HttpControlers;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpStatusCodeInformation
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, Octomer 02, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpStatusCodeInformation {
			NONE = 0X00000000,
			CONTINUE = 100,
			SWITCHING_PROTOCOLS = 101
		}sio_E_HttpStatusCodeInformation;

		typedef class sio_C_HttpStatusCodeInformation : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			uint8_t sio_V_HttpStatusCodeInformationResultNum;
			std::string sio_V_HttpStatusCodeInformationResultStr;
			std::string sio_V_HttpStatusCodeInformationDescription;
			std::stringstream sio_SS_HttpStatusCodeInformation;
		public:
			sio_C_HttpStatusCodeInformation() = delete;
			sio_C_HttpStatusCodeInformation(
				sio_E_HttpStatusCodeInformation* sio_PE_HttpStatusCodeInformation
			);
			std::string sio_FN_GetHttpStatusCodeInformation();
		}sio_C_HttpStatusCodeInformation;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpStatusCodeSuccessful
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, Octomer 02, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpStatusCodeSuccessful {
			NONE = 0X00000000,
			OK = 200,
			CREATED = 201,
			ACCEPTED = 202,
			NON_AUTHORITATIVE_INFORMATION = 203,
			NO_CONTENT = 204,
			RESET_CONTENT = 205,
			PARTIAL_CONTENT = 206
		}sio_E_HttpStatusCodeSuccessful;

		typedef class sio_C_HttpStatusCodeSuccessful : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			uint8_t sio_V_HttpStatusCodeSuccessfulResultNum;
			std::string sio_V_HttpStatusCodeSuccessfulResultStr;
			std::string sio_V_HttpStatusCodeSuccessfulDescription;
			std::stringstream sio_SS_HttpStatusCodeSuccessful;
		public:
			sio_C_HttpStatusCodeSuccessful() = delete;
			sio_C_HttpStatusCodeSuccessful(
				sio_E_HttpStatusCodeSuccessful* sio_PE_HttpStatusCodeSuccessful
			);
			std::string sio_FN_GetHttpStatusCodeSuccessful();
		}sio_C_HttpStatusCodeSuccessful;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpStatusCodeRedirection
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, Octomer 02, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpStatusCodeRedirection {
			NONE = 0X00000000,
			MULTIPLE_CHOICES = 300,
			MOVED_PERMANENTLY = 301,
			FOUND = 302,
			SEE_OTHER = 303,
			NOT_MODIFIED = 304,
			USE_PROXY = 305,
			UNUSED = 306,
			TEMPORARY_REDIRECT = 307
		}sio_E_HttpStatusCodeRedirection;

		typedef class sio_C_HttpStatusCodeRedirection : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			uint8_t sio_V_HttpStatusCodeRedirectionResultNum;
			std::string sio_V_HttpStatusCodeRedirectionResultStr;
			std::string sio_V_HttpStatusCodeRedirectionDescription;
			std::stringstream sio_SS_HttpStatusCodeRedirection;
		public:
			sio_C_HttpStatusCodeRedirection() = delete;
			sio_C_HttpStatusCodeRedirection(
				sio_E_HttpStatusCodeRedirection* sio_PE_HttpStatusCodeRedirection
			);
			std::string sio_FN_GetHttpStatusCodeRedirection();
		}sio_C_HttpStatusCodeRedirection;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpStatusCodeClientError
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, Octomer 02, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpStatusCodeClientError {
			NONE = 0X00000000,
			BAD_REQUEST = 400,
			UNAUTHORIZED = 401,
			PAYMENT_REQUIRED = 402,
			FORBIDDEN = 403,
			NOT_FOUND = 404,
			METHOD_NOT_ALLOWED = 405,
			NOT_ACCEPTABLE = 406,
			PROXY_AUTHENTICATION_REQUIRED = 407,
			REQUEST_TIMEOUT = 408,
			CONFLICT = 409,
			GONE = 410,
			LENGTH_REQUIRED = 411,
			PRECONDITION_FAILED = 412,
			REQUEST_ENTITY_TOO_LARGE = 413,
			REQUEST_URL_TOO_LONG = 414,
			UNSUPPORTED_MEDIA_TYPE = 415,
			REQUESTED_RANGE_NOT_SATISFIABLE = 416,
			EXPECTATION_FAILED = 417
		}sio_E_HttpStatusCodeClientError;

		typedef class sio_C_HttpStatusCodeClientError : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			uint8_t sio_V_HttpStatusCodeClientErrorResultNum;
			std::string sio_V_HttpStatusCodeClientErrorResultStr;
			std::string sio_V_HttpStatusCodeClientErrorDescription;
			std::stringstream sio_SS_HttpStatusCodeClientError;
		public:
			sio_C_HttpStatusCodeClientError() = delete;
			sio_C_HttpStatusCodeClientError(
				sio_E_HttpStatusCodeClientError* sio_PE_HttpStatusCodeClientError
			);
			std::string sio_FN_GetHttpStatusCodeClientError();
		}sio_C_HttpStatusCodeClientError;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpStatusCodeServerError
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, Octomer 02, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpStatusCodeServerError {
			NONE = 0X00000000,
			INTERNAL_SERVER_ERROR = 500,
			NOT_IMPLEMENTED = 501,
			BAD_GATEWAY = 502,
			SERVICE_UNAVAILABLE = 503,
			GATEWAY_TIMEOUT = 504,
			HTTP_VERSION_NOT_SUPPORTED = 505
		}sio_E_HttpStatusCodeServerError;

		typedef class sio_C_HttpStatusCodeServerError : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			uint8_t sio_V_HttpStatusCodeServerErrorResultNum;
			std::string sio_V_HttpStatusCodeServerErrorResultStr;
			std::string sio_V_HttpStatusCodeServerErrorDescription;
			std::stringstream sio_SS_HttpStatusCodeServerError;
		public:
			sio_C_HttpStatusCodeServerError() = delete;
			sio_C_HttpStatusCodeServerError(
				sio_E_HttpStatusCodeServerError* sio_PE_HttpStatusCodeServerError
			);
			std::string sio_FN_GetHttpStatusCodeServerError();
		}sio_C_HttpStatusCodeServerError;

		////////////////////////////////////////////////////////////////////////////////
		//        NAME: sio_C_HttpStatusCode
		// DESCRIPTION: This is the structure create to hold all the NAME related .
		//   ARGUMENTS: N/A
		// USES GLOBAL: N/A
		// MODIFIES GL: N/A
		//     RETURNS: N/A
		//      AUTHOR: SHERIFI
		// AUTHOR/DATE: GMT Saturday, Octomer 02, 2020
		////////////////////////////////////////////////////////////////////////////////
		typedef enum sio_E_HttpStatusCode {
			NONE = 0X00000000,
			INFORMATIONAL = 100,
			SUCCESS = 200,
			REDIRECTION = 300,
			CLIENTERROR = 400,
			SERVERERROR = 500,
		}sio_E_HttpStatusCode;

		typedef class sio_C_HttpStatusCode : sio_S_HttpControlers {
		private:
			const char* sio_V_name;
			uint8_t sio_V_HttpStatusCodeResultNum;
			std::string sio_V_HttpStatusCodeResultStr;
			std::string sio_V_HttpStatusCodeDescription;
			std::stringstream sio_SS_HttpStatusCode;
		public:
			sio_C_HttpStatusCode() = delete;
			sio_C_HttpStatusCode(
				sio_E_HttpStatusCode* sio_PE_HttpStatusCode,
				sio_C_HttpStatusCodeInformation* sio_PC_HttpStatusCodeInformation,
				sio_C_HttpStatusCodeSuccessful* sio_PC_HttpStatusCodeSuccessful,
				sio_C_HttpStatusCodeRedirection* sio_PC_HttpStatusCodeRedirection,
				sio_C_HttpStatusCodeClientError* sio_PC_HttpStatusCodeClientError,
				sio_C_HttpStatusCodeServerError* sio_C_HttpStatusCodeServerError
			);
			std::string sio_FN_GetHttpStatusCode();
		}sio_C_HttpStatusCode;

		/*
		typedef void(sio_API_PTR* sio_PFN_WriteInfo)(sio_S_Info* sio_PS_Info);

		sio_API_ATTR void sio_API_CALL sio_FN_WriteInfo(
			sio_S_Info* sio_PS_Info
		);

		typedef sio_Result(sio_API_PTR* sio_PFN_DeleteInfo)(sio_S_Info* sio_PS_Info, sio_S_Company* sio_PS_Company, sio_S_Management* sio_PS_Managemnet);

		sio_API_ATTR sio_Result sio_API_CALL sio_FN_DeleteInfo(
			sio_S_Info* sio_PS_Info,
			sio_S_Company* sio_PS_Company,
			sio_S_Management* sio_PS_Managemnet
		);
		*/

	} // namespace httpStatusCode
} //namespace sio
#endif // !SIO_HTTP_STATUS_CODE_H_
